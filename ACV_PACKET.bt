//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: ACV_PACKET.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: Armored Core V Packet format
//  Category: Networking
// File Mask: 
//  ID Bytes: 
//   History: See ACVD_PACKET.bt
//------------------------------------------------

BigEndian();

//------------------------------------------------

enum <uint32> message_type
{
    Reply = 0,
    KeyMaterial = 1,
    GetServiceStatus = 2,
    Ticket = 3,
    RequestQueryLoginServerInfo = 5,
    RequestHandshake = 6,
};

typedef struct
{
    ushort packet_size;
} PacketPrefix <bgcolor=cLtRed>;

typedef struct
{
    ushort padding <hidden=true>; Assert(padding == 0);
    ushort sequence;
    uint payload_length;
    uint payload_length_2;
} PacketHeader <bgcolor=cRed>;

typedef struct 
{
    message_type type;
    uint sequence;
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    uint unk0C <hidden=true>; Assert(unk0C == 0);
} MessageHeader <bgcolor=cDkRed>;

typedef struct
{
    uint unk00;
    uint unk04;
    uint unk08; Assert(unk08 == 0);
    uint unk0C; Assert(unk0C == 0);
} MessageResponseHeader <bgcolor=cBlack>;

//------------------------------------------------

if (ReadUShort(0) == (FileSize() - 2))
{
    PacketPrefix packet_prefix;
}

PacketHeader packet_header;
MessageHeader message_header;
if (message_header.type == Reply)
{
    MessageResponseHeader message_response_header;
}