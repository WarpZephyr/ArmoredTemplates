//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: CGType.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: NVBinary parameter data types enum.
//  Category: Shaders
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <uint> CGType
{
    CG_UNKNOWN_TYPE = 0,
    CG_STRUCT = 1,
    CG_ARRAY = 2,
    CG_TYPE_START_ENUM = 1024,
    CG_HALF = 1025,
    CG_HALF2 = 1026,
    CG_HALF3 = 1027,
    CG_HALF4 = 1028,
    CG_HALF1x1 = 1029,
    CG_HALF1x2 = 1030,
    CG_HALF1x3 = 1031,
    CG_HALF1x4 = 1032,
    CG_HALF2x1 = 1033,
    CG_HALF2x2 = 1034,
    CG_HALF2x3 = 1035,
    CG_HALF2x4 = 1036,
    CG_HALF3x1 = 1037,
    CG_HALF3x2 = 1038,
    CG_HALF3x3 = 1039,
    CG_HALF3x4 = 1040,
    CG_HALF4x1 = 1041,
    CG_HALF4x2 = 1042,
    CG_HALF4x3 = 1043,
    CG_HALF4x4 = 1044,
    CG_FLOAT = 1045,
    CG_FLOAT2 = 1046,
    CG_FLOAT3 = 1047,
    CG_FLOAT4 = 1048,
    CG_FLOAT1x1 = 1049,
    CG_FLOAT1x2 = 1050,
    CG_FLOAT1x3 = 1051,
    CG_FLOAT1x4 = 1052,
    CG_FLOAT2x1 = 1053,
    CG_FLOAT2x2 = 1054,
    CG_FLOAT2x3 = 1055,
    CG_FLOAT2x4 = 1056,
    CG_FLOAT3x1 = 1057,
    CG_FLOAT3x2 = 1058,
    CG_FLOAT3x3 = 1059,
    CG_FLOAT3x4 = 1060,
    CG_FLOAT4x1 = 1061,
    CG_FLOAT4x2 = 1062,
    CG_FLOAT4x3 = 1063,
    CG_FLOAT4x4 = 1064,
    CG_SAMPLER1D = 1065,
    CG_SAMPLER2D = 1066,
    CG_SAMPLER3D = 1067,
    CG_SAMPLERRECT = 1068,
    CG_SAMPLERCUBE = 1069,
    CG_FIXED = 1070,
    CG_FIXED2 = 1071,
    CG_FIXED3 = 1072,
    CG_FIXED4 = 1073,
    CG_FIXED1x1 = 1074,
    CG_FIXED1x2 = 1075,
    CG_FIXED1x3 = 1076,
    CG_FIXED1x4 = 1077,
    CG_FIXED2x1 = 1078,
    CG_FIXED2x2 = 1079,
    CG_FIXED2x3 = 1080,
    CG_FIXED2x4 = 1081,
    CG_FIXED3x1 = 1082,
    CG_FIXED3x2 = 1083,
    CG_FIXED3x3 = 1084,
    CG_FIXED3x4 = 1085,
    CG_FIXED4x1 = 1086,
    CG_FIXED4x2 = 1087,
    CG_FIXED4x3 = 1088,
    CG_FIXED4x4 = 1089,
    CG_HALF1 = 1090,
    CG_FLOAT1 = 1091,
    CG_FIXED1 = 1092,
    CG_INT = 1093,
    CG_INT1 = 1094,
    CG_INT2 = 1095,
    CG_INT3 = 1096,
    CG_INT4 = 1097,
    CG_INT1x1 = 1098,
    CG_INT1x2 = 1099,
    CG_INT1x3 = 1100,
    CG_INT1x4 = 1101,
    CG_INT2x1 = 1102,
    CG_INT2x2 = 1103,
    CG_INT2x3 = 1104,
    CG_INT2x4 = 1105,
    CG_INT3x1 = 1106,
    CG_INT3x2 = 1107,
    CG_INT3x3 = 1108,
    CG_INT3x4 = 1109,
    CG_INT4x1 = 1110,
    CG_INT4x2 = 1111,
    CG_INT4x3 = 1112,
    CG_INT4x4 = 1113,
    CG_BOOL = 1114,
    CG_BOOL1 = 1115,
    CG_BOOL2 = 1116,
    CG_BOOL3 = 1117,
    CG_BOOL4 = 1118,
    CG_BOOL1x1 = 1119,
    CG_BOOL1x2 = 1120,
    CG_BOOL1x3 = 1121,
    CG_BOOL1x4 = 1122,
    CG_BOOL2x1 = 1123,
    CG_BOOL2x2 = 1124,
    CG_BOOL2x3 = 1125,
    CG_BOOL2x4 = 1126,
    CG_BOOL3x1 = 1127,
    CG_BOOL3x2 = 1128,
    CG_BOOL3x3 = 1129,
    CG_BOOL3x4 = 1130,
    CG_BOOL4x1 = 1131,
    CG_BOOL4x2 = 1132,
    CG_BOOL4x3 = 1133,
    CG_BOOL4x4 = 1134,
    CG_STRING = 1135,
    CG_PROGRAM_TYPE = 1136,
    CG_TEXTURE = 1137
};

typedef struct(string type)
{
    local string _type <hidden=true> = type;
    switch (type)
    {
        case "HALF":
            hfloat value;
            break;
        case "FLOAT":
            float value;
            break;
        case "FIXED":
            ushort value;
            Warning("Fixed point precision read is not yet supported");
            break;
        case "INT":
            int value;
            break;
        case "BOOL":
            int value;
            break;
        default:
            Assert(false, Str("Unknown type: %s", type));
    }
} Scalar <read=ReadScalar, optimize=false>;

string ReadScalar(Scalar& scalar)
{
    local string formatStr <hidden=true>;
    switch (scalar._type)
    {
        case "HALF":
            formatStr = "%f";
            break;
        case "FLOAT":
            formatStr = "%f";
            break;
        case "FIXED":
            formatStr = "%d";
            Warning("Fixed point precision read is not yet supported");
            break;
        case "INT":
            formatStr = "%d";
            break;
        case "BOOL":
            formatStr = "%d";
            break;
        default:
            Assert(false, Str("Unknown type: %s", scalar._type));
    }

    return TrimDecimalZeros(Str(formatStr, scalar.value));
}

typedef struct(string type, int ncols)
{
    local string _type <hidden=true> = type;
    local int _ncols <hidden=true> = ncols;
    Scalar values(type)[ncols];
} Vector <read=ReadVector, optimize=false>;

string ReadVector(Vector& vector)
{
    local string result <hidden=true> = "";
    local int i <hidden=true>;
    local int lastIndex = vector._ncols - 1;
    for (i = 0; i < lastIndex; i++)
    {
        result += Str("%s,", ReadScalar(vector.values[i]));
    }

    result += ReadScalar(vector.values[lastIndex]);
    return Str("%s%d(%s)", StrToLower(vector._type), vector._ncols, result);
}

typedef struct(string type, int nrows, int ncols)
{
    local string _type <hidden=true> = type;
    local int _nrows <hidden=true> = nrows;
    local int _ncols <hidden=true> = ncols;
    Vector rows(type, ncols)[nrows];
} Matrix <read=ReadMatrix>;

string ReadMatrix(Matrix& matrix)
{
    local string result <hidden=true> = "";
    
    local int i <hidden=true>;
    local int lastIndex = vector._nrows - 1;
    for (i = 0; i < lastIndex; i++)
    {
        result += Str("(%s),", ReadVector(matrix.rows[i]));
    }

    result += Str("(%s)", ReadVector(matrix.rows[lastIndex]));
    return Str("%s%dx%d(%s)", StrToLower(matrix._type), matrix._nrows, matrix._ncols, result);
}

void ReadDefaultValue(CGType type)
{
    switch(type)
    {
        case CG_UNKNOWN_TYPE:
            Assert(false, "Type was unknown.");
            break;
        case CG_STRUCT:
            ubyte defaultValue_struct_marker <bgcolor=cBlack>;
            Warning("Struct read not supported.");
            break;
        case CG_ARRAY:
            ubyte defaultValue_array_marker <bgcolor=cBlack>;
            Warning("Array read not supported.");
            break;
        case CG_TYPE_START_ENUM:
            Assert(false, "Type was the starting type.");
            break;
        case CG_HALF:
            Scalar defaultValue("HALF");
            break;
        case CG_HALF2:
            Vector defaultValue("HALF", 2);
            break;
        case CG_HALF3:
            Vector defaultValue("HALF", 3);
            break;
        case CG_HALF4:
            Vector defaultValue("HALF", 4);
            break;
        case CG_HALF1x1:
            Matrix defaultValue("HALF", 1, 1);
            break;
        case CG_HALF1x2:
            Matrix defaultValue("HALF", 1, 2);
            break;
        case CG_HALF1x3:
            Matrix defaultValue("HALF", 1, 3);
            break;
        case CG_HALF1x4:
            Matrix defaultValue("HALF", 1, 4);
            break;
        case CG_HALF2x1:
            Matrix defaultValue("HALF", 2, 1);
            break;
        case CG_HALF2x2:
            Matrix defaultValue("HALF", 2, 2);
            break;
        case CG_HALF2x3:
            Matrix defaultValue("HALF", 2, 3);
            break;
        case CG_HALF2x4:
            Matrix defaultValue("HALF", 2, 4);
            break;
        case CG_HALF3x1:
            Matrix defaultValue("HALF", 3, 1);
            break;
        case CG_HALF3x2:
            Matrix defaultValue("HALF", 3, 2);
            break;
        case CG_HALF3x3:
            Matrix defaultValue("HALF", 3, 3);
            break;
        case CG_HALF3x4:
            Matrix defaultValue("HALF", 3, 4);
            break;
        case CG_HALF4x1:
            Matrix defaultValue("HALF", 4, 1);
            break;
        case CG_HALF4x2:
            Matrix defaultValue("HALF", 4, 2);
            break;
        case CG_HALF4x3:
            Matrix defaultValue("HALF", 4, 3);
            break;
        case CG_HALF4x4:
            Matrix defaultValue("HALF", 4, 4);
            break;
        case CG_FLOAT:
            Scalar defaultValue("FLOAT");
            break;
        case CG_FLOAT2:
            Vector defaultValue("FLOAT", 2);
            break;
        case CG_FLOAT3:
            Vector defaultValue("FLOAT", 3);
            break;
        case CG_FLOAT4:
            Vector defaultValue("FLOAT", 4);
            break;
        case CG_FLOAT1x1:
            Matrix defaultValue("FLOAT", 1, 1);
            break;
        case CG_FLOAT1x2:
            Matrix defaultValue("FLOAT", 1, 2);
            break;
        case CG_FLOAT1x3:
            Matrix defaultValue("FLOAT", 1, 3);
            break;
        case CG_FLOAT1x4:
            Matrix defaultValue("FLOAT", 1, 4);
            break;
        case CG_FLOAT2x1:
            Matrix defaultValue("FLOAT", 2, 1);
            break;
        case CG_FLOAT2x2:
            Matrix defaultValue("FLOAT", 2, 2);
            break;
        case CG_FLOAT2x3:
            Matrix defaultValue("FLOAT", 2, 3);
            break;
        case CG_FLOAT2x4:
            Matrix defaultValue("FLOAT", 2, 4);
            break;
        case CG_FLOAT3x1:
            Matrix defaultValue("FLOAT", 3, 1);
            break;
        case CG_FLOAT3x2:
            Matrix defaultValue("FLOAT", 3, 2);
            break;
        case CG_FLOAT3x3:
            Matrix defaultValue("FLOAT", 3, 3);
            break;
        case CG_FLOAT3x4:
            Matrix defaultValue("FLOAT", 3, 4);
            break;
        case CG_FLOAT4x1:
            Matrix defaultValue("FLOAT", 4, 1);
            break;
        case CG_FLOAT4x2:
            Matrix defaultValue("FLOAT", 4, 2);
            break;
        case CG_FLOAT4x3:
            Matrix defaultValue("FLOAT", 4, 3);
            break;
        case CG_FLOAT4x4:
            Matrix defaultValue("FLOAT", 4, 4);
            break;
        case CG_SAMPLER1D:
            ubyte defaultValue_sampler1D_marker <bgcolor=cBlack>;
            Warning("sampler1D read not supported.");
            break;
        case CG_SAMPLER2D:
            ubyte defaultValue_sampler2D_marker <bgcolor=cBlack>;
            Warning("sampler2D read not supported.");
            break;
        case CG_SAMPLER3D:
            ubyte defaultValue_sampler3D_marker <bgcolor=cBlack>;
            Warning("sampler3D read not supported.");
            break;
        case CG_SAMPLERRECT:
            ubyte defaultValue_samplerRECT_marker <bgcolor=cBlack>;
            Warning("samplerRECT read not supported.");
            break;
        case CG_SAMPLERCUBE:
            ubyte defaultValue_samplerCUBE_marker <bgcolor=cBlack>;
            Warning("samplerCUBE read not supported.");
            break;
        case CG_FIXED:
            Scalar defaultValue("FIXED");
            break;
        case CG_FIXED2:
            Vector defaultValue("FIXED", 2);
            break;
        case CG_FIXED3:
            Vector defaultValue("FIXED", 3);
            break;
        case CG_FIXED4:
            Vector defaultValue("FIXED", 4);
            break;
        case CG_FIXED1x1:
            Matrix defaultValue("FIXED", 1, 1);
            break;
        case CG_FIXED1x2:
            Matrix defaultValue("FIXED", 1, 2);
            break;
        case CG_FIXED1x3:
            Matrix defaultValue("FIXED", 1, 3);
            break;
        case CG_FIXED1x4:
            Matrix defaultValue("FIXED", 1, 4);
            break;
        case CG_FIXED2x1:
            Matrix defaultValue("FIXED", 2, 1);
            break;
        case CG_FIXED2x2:
            Matrix defaultValue("FIXED", 2, 2);
            break;
        case CG_FIXED2x3:
            Matrix defaultValue("FIXED", 2, 3);
            break;
        case CG_FIXED2x4:
            Matrix defaultValue("FIXED", 2, 4);
            break;
        case CG_FIXED3x1:
            Matrix defaultValue("FIXED", 3, 1);
            break;
        case CG_FIXED3x2:
            Matrix defaultValue("FIXED", 3, 2);
            break;
        case CG_FIXED3x3:
            Matrix defaultValue("FIXED", 3, 3);
            break;
        case CG_FIXED3x4:
            Matrix defaultValue("FIXED", 3, 4);
            break;
        case CG_FIXED4x1:
            Matrix defaultValue("FIXED", 4, 1);
            break;
        case CG_FIXED4x2:
            Matrix defaultValue("FIXED", 4, 2);
            break;
        case CG_FIXED4x3:
            Matrix defaultValue("FIXED", 4, 3);
            break;
        case CG_FIXED4x4:
            Matrix defaultValue("FIXED", 4, 4);
            break;
        case CG_HALF1:
            Vector defaultValue("HALF", 1);
            break;
        case CG_FLOAT1:
            Vector defaultValue("FLOAT", 1);
            break;
        case CG_FIXED1:
            Vector defaultValue("FIXED", 1);
            break;
        case CG_INT:
            Scalar defaultValue("INT");
            break;
        case CG_INT1:
            Vector defaultValue("INT", 1);
            break;
        case CG_INT2:
            Vector defaultValue("INT", 2);
            break;
        case CG_INT3:
            Vector defaultValue("INT", 3);
            break;
        case CG_INT4:
            Vector defaultValue("INT", 4);
            break;
        case CG_INT1x1:
            Matrix defaultValue("INT", 1, 1);
            break;
        case CG_INT1x2:
            Matrix defaultValue("INT", 1, 2);
            break;
        case CG_INT1x3:
            Matrix defaultValue("INT", 1, 3);
            break;
        case CG_INT1x4:
            Matrix defaultValue("INT", 1, 4);
            break;
        case CG_INT2x1:
            Matrix defaultValue("INT", 2, 1);
            break;
        case CG_INT2x2:
            Matrix defaultValue("INT", 2, 2);
            break;
        case CG_INT2x3:
            Matrix defaultValue("INT", 2, 3);
            break;
        case CG_INT2x4:
            Matrix defaultValue("INT", 2, 4);
            break;
        case CG_INT3x1:
            Matrix defaultValue("INT", 3, 1);
            break;
        case CG_INT3x2:
            Matrix defaultValue("INT", 3, 2);
            break;
        case CG_INT3x3:
            Matrix defaultValue("INT", 3, 3);
            break;
        case CG_INT3x4:
            Matrix defaultValue("INT", 3, 4);
            break;
        case CG_INT4x1:
            Matrix defaultValue("INT", 4, 1);
            break;
        case CG_INT4x2:
            Matrix defaultValue("INT", 4, 2);
            break;
        case CG_INT4x3:
            Matrix defaultValue("INT", 4, 3);
            break;
        case CG_INT4x4:
            Matrix defaultValue("INT", 4, 4);
            break;
        case CG_BOOL:
            Scalar defaultValue("BOOL");
            break;
        case CG_BOOL1:
            Vector defaultValue("BOOL", 1);
            break;
        case CG_BOOL2:
            Vector defaultValue("BOOL", 2);
            break;
        case CG_BOOL3:
            Vector defaultValue("BOOL", 3);
            break;
        case CG_BOOL4:
            Vector defaultValue("BOOL", 4);
            break;
        case CG_BOOL1x1:
            Matrix defaultValue("BOOL", 1, 1);
            break;
        case CG_BOOL1x2:
            Matrix defaultValue("BOOL", 1, 2);
            break;
        case CG_BOOL1x3:
            Matrix defaultValue("BOOL", 1, 3);
            break;
        case CG_BOOL1x4:
            Matrix defaultValue("BOOL", 1, 4);
            break;
        case CG_BOOL2x1:
            Matrix defaultValue("BOOL", 2, 1);
            break;
        case CG_BOOL2x2:
            Matrix defaultValue("BOOL", 2, 2);
            break;
        case CG_BOOL2x3:
            Matrix defaultValue("BOOL", 2, 3);
            break;
        case CG_BOOL2x4:
            Matrix defaultValue("BOOL", 2, 4);
            break;
        case CG_BOOL3x1:
            Matrix defaultValue("BOOL", 3, 1);
            break;
        case CG_BOOL3x2:
            Matrix defaultValue("BOOL", 3, 2);
            break;
        case CG_BOOL3x3:
            Matrix defaultValue("BOOL", 3, 3);
            break;
        case CG_BOOL3x4:
            Matrix defaultValue("BOOL", 3, 4);
            break;
        case CG_BOOL4x1:
            Matrix defaultValue("BOOL", 4, 1);
            break;
        case CG_BOOL4x2:
            Matrix defaultValue("BOOL", 4, 2);
            break;
        case CG_BOOL4x3:
            Matrix defaultValue("BOOL", 4, 3);
            break;
        case CG_BOOL4x4:
            Matrix defaultValue("BOOL", 4, 4);
            break;
        case CG_STRING:
            string defaultValue;
            break;
        case CG_PROGRAM_TYPE:
            ubyte defaultValue_program_type_marker <bgcolor=cBlack>;
            Warning("program_type read not supported.");
            break;
        case CG_TEXTURE:
            ubyte defaultValue_texture_marker <bgcolor=cBlack>;
            Warning("texture read not supported.");
            break;
        default:
            Assert(false);
    }
}