//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: CgUtilities.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: Utility functions for read output.
//  Category: Utility
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

string CGEnumToStr(CGEnum type)
{
    return StrTrimStart(StrToLower(EnumToString(type)), 3);
}

string CGResourceLowerToStr(CGResource type)
{
    return StrTrimStart(StrToLower(EnumToString(type)), 3);
}

string CGResourceToStr(CGResource type, int resIndex)
{
    local string str <hidden=true> = StrTrimStart(EnumToString(type), 3);
    return str == "C" ? Str("%s%d", str, resIndex) : str;
}

string CGTypeToStr(CGType type)
{
    return StrTrimStart(StrToLower(EnumToString(type)), 3);
}

string CGTypeToGlslType(string type)
{
    switch (type)
    {
        case "half1": return "hvec1";
        case "half2": return "hvec2";
        case "half3": return "hvec3";
        case "half4": return "hvec4";
        case "half1x1": return "hmat1";
        case "half1x2": return "hmat1x2";
        case "half1x3": return "hmat1x3";
        case "half1x4": return "hmat1x4";
        case "half2x1": return "hmat2x1";
        case "half2x2": return "hmat2";
        case "half2x3": return "hmat2x3";
        case "half2x4": return "hmat2x4";
        case "half3x1": return "hmat3x1";
        case "half3x2": return "hmat3x2";
        case "half3x3": return "hmat3";
        case "half3x4": return "hmat3x4";
        case "half4x1": return "hmat4x1";
        case "half4x2": return "hmat4x2";
        case "half4x3": return "hmat4x3";
        case "half4x4": return "hmat4";
        case "float1": return "vec1";
        case "float2": return "vec2";
        case "float3": return "vec3";
        case "float4": return "vec4";
        case "float1x1": return "mat1";
        case "float1x2": return "mat1x2";
        case "float1x3": return "mat1x3";
        case "float1x4": return "mat1x4";
        case "float2x1": return "mat2x1";
        case "float2x2": return "mat2";
        case "float2x3": return "mat2x3";
        case "float2x4": return "mat2x4";
        case "float3x1": return "mat3x1";
        case "float3x2": return "mat3x2";
        case "float3x3": return "mat3";
        case "float3x4": return "mat3x4";
        case "float4x1": return "mat4x1";
        case "float4x2": return "mat4x2";
        case "float4x3": return "mat4x3";
        case "float4x4": return "mat4";
        case "fixed1": return "fvec1";
        case "fixed2": return "fvec2";
        case "fixed3": return "fvec3";
        case "fixed4": return "fvec4";
        case "fixed1x1": return "fmat1";
        case "fixed1x2": return "fmat1x2";
        case "fixed1x3": return "fmat1x3";
        case "fixed1x4": return "fmat1x4";
        case "fixed2x1": return "fmat2x1";
        case "fixed2x2": return "fmat2";
        case "fixed2x3": return "fmat2x3";
        case "fixed2x4": return "fmat2x4";
        case "fixed3x1": return "fmat3x1";
        case "fixed3x2": return "fmat3x2";
        case "fixed3x3": return "fmat3";
        case "fixed3x4": return "fmat3x4";
        case "fixed4x1": return "fmat4x1";
        case "fixed4x2": return "fmat4x2";
        case "fixed4x3": return "fmat4x3";
        case "fixed4x4": return "fmat4";
        case "int1": return "ivec1";
        case "int2": return "ivec2";
        case "int3": return "ivec3";
        case "int4": return "ivec4";
        case "int1x1": return "imat1";
        case "int1x2": return "imat1x2";
        case "int1x3": return "imat1x3";
        case "int1x4": return "imat1x4";
        case "int2x1": return "imat2x1";
        case "int2x2": return "imat2";
        case "int2x3": return "imat2x3";
        case "int2x4": return "imat2x4";
        case "int3x1": return "imat3x1";
        case "int3x2": return "imat3x2";
        case "int3x3": return "imat3";
        case "int3x4": return "imat3x4";
        case "int4x1": return "imat4x1";
        case "int4x2": return "imat4x2";
        case "int4x3": return "imat4x3";
        case "int4x4": return "imat4";
        case "bool1": return "bvec1";
        case "bool2": return "bvec2";
        case "bool3": return "bvec3";
        case "bool4": return "bvec4";
        case "bool1x1": return "bmat1";
        case "bool1x2": return "bmat1x2";
        case "bool1x3": return "bmat1x3";
        case "bool1x4": return "bmat1x4";
        case "bool2x1": return "bmat2x1";
        case "bool2x2": return "bmat2";
        case "bool2x3": return "bmat2x3";
        case "bool2x4": return "bmat2x4";
        case "bool3x1": return "bmat3x1";
        case "bool3x2": return "bmat3x2";
        case "bool3x3": return "bmat3";
        case "bool3x4": return "bmat3x4";
        case "bool4x1": return "bmat4x1";
        case "bool4x2": return "bmat4x2";
        case "bool4x3": return "bmat4x3";
        case "bool4x4": return "bmat4";
        case "samplerRECT": return "sampler2D";
        case "samplerCUBE": return "sampler3D";
        default:
            return type;
    }
}