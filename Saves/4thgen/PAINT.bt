//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: PAINT.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Armored Core 4thgen PAINT.DAT save files.
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Colors.bt"
BigEndian();

local const int COLOR_SET_CAPACITY = 16;
local const int PALETTE_COLOR_CAPACITY = 36;

//------------------------------------------------

typedef struct
{
    short unk00;
    short unk02 <hidden=true>; Assert(unk02 == 0);
} Header <bgcolor=cLtRed>;

//------------------------------------------------

typedef struct
{
    ColorSet colorSets[COLOR_SET_CAPACITY];
} ColorSets <read=ReadColorSets>;

byte ColorSetEmpty(ColorSet& colorset)
{
    if(ColorEmptyRGBA(colorset.Main) == 1
    && ColorEmptyRGBA(colorset.Sub) == 1
    && ColorEmptyRGBA(colorset.Support) == 1
    && ColorEmptyRGBA(colorset.Optional) == 1
    && ColorEmptyRGBA(colorset.Joint) == 1
    && ColorEmptyRGBA(colorset.Device) == 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

string ReadColorSets(ColorSets& colorsets)
{
    string str;
    local int FilledColorSets = 0;
    local int EmptyColorSets = 0;
    local int i;
    for(i = 0; i < COLOR_SET_CAPACITY; i++)
    {
        if(ColorSetEmpty(colorsets.colorSets[i]) == 1)
        {
            EmptyColorSets = EmptyColorSets + 1;
        }
        else
        {
            FilledColorSets = FilledColorSets + 1;
        }
    }
    return SPrintf(str, "Filled Color Sets: %d, Empty Color Sets: %d", FilledColorSets, EmptyColorSets);
}

//------------------------------------------------

typedef struct
{
    ColorRGBA color;
} PaletteColor <bgcolor=cGreen, read=ReadPaletteColor>;

string ReadPaletteColor(PaletteColor& paletteColor)
{
    return ReadColorRGBA(paletteColor.color);
}

typedef struct
{
    PaletteColor paletteColors[PALETTE_COLOR_CAPACITY];
} PaletteColors <bgcolor=cGreen, read=ReadPaletteColors>;

string ReadPaletteColors(PaletteColors& palettecolors)
{
    string str;
    local int FilledPaletteColors = 0;
    local int EmptyPaletteColors = 0;
    local int i;
    for(i = 0; i < PALETTE_COLOR_CAPACITY; i++)
    {
        if(ColorEmptyRGBA(palettecolors.paletteColors[i].color) == 1)
        {
            EmptyPaletteColors = EmptyPaletteColors + 1;
        }
        else
        {
            FilledPaletteColors = FilledPaletteColors + 1;
        }
    }
    return SPrintf(str, "Filled Palette Colors: %d, Empty Palette Colors: %d", FilledPaletteColors, EmptyPaletteColors);
}

//------------------------------------------------

Header header;
ColorSets colorSets;
PaletteColors paletteColors;