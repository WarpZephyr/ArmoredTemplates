//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: GPROG.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Armored Core For Answer Save Files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
local uint MISSION_COUNT = 42;
local uint NORMAL_MISSION_COUNT = 42;
local uint HARD_MISSION_COUNT = 42;
local uint COLLARED_MATCH_COUNT = 30;
local uint ORCA_MATCH_COUNT = 12;
local uint RESERVED_PART_COUNT = 1024;
local uint RESERVED_DESIGN_COUNT = 80;
local uint RESERVED_EMBLEM_COUNT = 64;

enum <ushort> PartUnlockStatus
{
    Hidden = 0,
    InShop = 4096,
    Owned = 8192
};

// Not done
enum <ubyte> PartCategory
{
    Head = 0,
    Core = 1,
    Arms = 2,
    Legs = 3,
    FCS = 4,
    Generator = 5,
    MainBooster = 6,
    BackBooster = 7,
    SideBooster = 8,
    OveredBooster = 9,
    RightArmUnit = 10,
    LeftArmUnit = 11,
    RightBackUnit = 12,
    LeftBackUnit = 13,
    ShoulderUnit = 14
};

enum <byte> MissionRankingType
{
    NotCompleted = -1,
    E = 0,
    D = 1,
    C = 2,
    B = 3,
    A = 4,
    S = 5
};

enum <ubyte> Bool
{
    False = 0,
    True = 1
};

//------------------------------------------------

typedef struct
{
    short game_completions;
    Bool show_intro;
    ubyte unk03;
    int story_count;
    short story_ids[MISSION_COUNT];
    int free_count;
    short free_ids[MISSION_COUNT];
} Missions <bgcolor=cRed>;

typedef struct
{
    MissionRankingType mission_ranking;
} MissionRanking <bgcolor=cDkGreen, read=ReadMissionRanking, optimize=false>;

string ReadMissionRanking(MissionRanking &ranking)
{
    return EnumToString(ranking.mission_ranking);
}

typedef struct
{
    MissionRanking rankings_normal[NORMAL_MISSION_COUNT];
    MissionRanking rankings_hard[HARD_MISSION_COUNT];
} Rankings;

typedef struct
{
    Bool match_won;
} Match <bgcolor=cLtBlue, read=ReadMatch, optimize=false>;

string ReadMatch(Match &match)
{
    return "Match Won: " + EnumToString(match.match_won);
}

typedef struct
{
    ubyte unk00;
    Match matches_won_collared[COLLARED_MATCH_COUNT];
    Match matches_won_orca[ORCA_MATCH_COUNT];
    ubyte unk2B;
    ubyte unk2C;
    ubyte unk2D;
    ubyte unk2E;
    ubyte unk2F;
    Bool arena_unlocked;
    Bool orca_arena_unlocked;
    ubyte unk32;
    ubyte unk33;
    ubyte unk34;
    ubyte unk35;
    ubyte unk36;
    ubyte unk37;
    ubyte unk38;
    ubyte unk39;
    ubyte unk3A;
    ubyte unk3B;
    ubyte unk3C;
    ubyte unk3D;
    ubyte unk3E;
    ubyte unk3F;
} Matches <bgcolor=cBlue, read=ReadMatches>;

string ReadMatches(Matches &matches)
{
    local string str;
    local string arena_unlock;
    local string orca_arena_unlock;
    switch(matches.arena_unlocked)
    {
        case 0: arena_unlock = "Arena Hidden"; break;
        case 1: arena_unlock = "Arena Unlocked"; break;
        default: Assert(false); break; // Not a save file
    }

    switch(matches.orca_arena_unlocked)
    {
        case 0: orca_arena_unlock = "Orca Arena Hidden"; break;
        case 1: orca_arena_unlock = "Orca Arena Unlocked"; break;
        default: Assert(false); break; // Not a save file
    }

    return SPrintf(str, "%s | %s", arena_unlock, orca_arena_unlock);
}

typedef struct
{
    PartCategory part_category;
    ubyte unk01 <hidden=true>; Assert(unk01 == 0);
    ushort part_id;
    PartUnlockStatus part_unlock_status;
} Part <bgcolor=cYellow, read=ReadPart, optimize=false>;

string ReadPart(Part &part)
{
    string str;
    string unlock_status;
    return SPrintf(str, "%i / %i / %s", part.part_category, part.part_id, EnumToString(part.part_unlock_status));
}

typedef struct
{
    int count;
    if (count < RESERVED_PART_COUNT)
    {
        Part parts[RESERVED_PART_COUNT];
    }
    else
    {
        Part parts[count];
    }
} Parts <bgcolor=cLtYellow, read=ReadParts>;

string ReadParts(Parts &parts)
{
    string str;
    return SPrintf(str, "%i", parts.count);
}

typedef struct
{
    int count;
    short design_ids[count];
    if (count < RESERVED_DESIGN_COUNT)
    {
        short reserved_design_id_space[RESERVED_DESIGN_COUNT - count];
    }
} Designs <bgcolor=cDkYellow, read=ReadDesigns>;

string ReadDesigns(Designs &design_ids)
{
    string str;
    return SPrintf(str, "%i", design_ids.count);
}

typedef struct
{
    int count;
    ubyte emblem_ids[count];
    if (count < RESERVED_EMBLEM_COUNT)
    {
        ubyte reserved_emblem_id_space[RESERVED_EMBLEM_COUNT - count];
    }
} Emblems <bgcolor=cLtAqua>;

typedef struct
{
    int count;
    ubyte unk_ids[count];
} UnkIDs <bgcolor=cDkAqua>;

typedef struct
{
    int frs_amount;
    int count;

    if (count > 0)
    {
        ubyte frs_ids[count];
    }
} FRS <bgcolor=cGreen>;

//------------------------------------------------

Missions missions;
Rankings rankings;
Matches matches;
Parts parts;
Designs designs;
ubyte unkData[40] <bgcolor=cBlack>;
Emblems emblems;
FRS frs;