//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: Design.bt
//   Authors: WarpZephyr
//   Version: 1.1.4
//   Purpose: Armored Core For Answer design structures.
//  Category: Saves
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define _ACCOLORSET_NO_CALL
#define _ACTHUMBNAIL_NO_CALL

#ifndef _DESIGN_ENCODING_AUTO
#define _DESIGN_ENCODING_AUTO

// Auto detect based on file size
// 24,280 means 2 byte encoding is being used (US, JP for Xbox 360) (US for PS3)
// 24,184 means 1 byte encoding is being used (JP for PS3)
local ubyte _DESIGN_ENCODING_WIDE <hidden=true> = 0;
local quad _DESDOC_FILE_SIZE <hidden=true> = FileSize();
if (_DESDOC_FILE_SIZE == 24280)
{
    _DESIGN_ENCODING_WIDE = 1;
}

#endif

#include "../../Util.bt"
#include "AcColorSet.bt"
#include "Thumbnail.bt"
#include "Emblem.bt"

//------------------------------------------------

typedef struct
{
    ushort head;
    ushort core;
    ushort arms;
    ushort legs;
    ushort fcs;
    ushort generator;
    ushort main_booster;
    ushort back_booster;
    ushort side_booster;
    ushort overed_booster;
    ushort right_arm_unit;
    ushort left_arm_unit;
    ushort right_back_unit;
    ushort left_back_unit;
    ushort shoulder_unit;
    ushort right_hangar_Unit;
    ushort left_hangar_Unit;
    ushort head_top_stabilizer;
    ushort head_right_stabilizer;
    ushort head_left_stabilizer;
    ushort core_upper_right_stabilizer;
    ushort core_upper_left_stabilzier;
    ushort core_lower_right_stabilizer;
    ushort core_lower_left_stabilizer;
    ushort arm_right_stabilizer;
    ushort arm_left_stabilizer;
    ushort legs_back_stabilizer;
    ushort legs_upper_right_stabilizer;
    ushort legs_upper_left_stabilizer;
    ushort legs_upper_right_back_stabilizer;
    ushort legs_upper_left_back_stabilizer;
    ushort legs_middle_right_stabilizer;
    ushort legs_middle_left_stabilizer;
    ushort legs_middle_right_back_stabilizer;
    ushort legs_middle_left_back_stabilizer;
    ushort legs_lower_right_stabilizer;
    ushort legs_lower_left_stabilizer;
    ushort legs_lower_right_back_stabilizer;
    ushort legs_lower_left_back_stabilizer;
} Parts <bgcolor=cLtGreen>;

typedef struct
{
    ubyte en_output;
    ubyte en_capacity;
    ubyte kp_output;
    ubyte load;
    ubyte en_weapon_skill;
    ubyte maneuverability;
    ubyte firing_stability;
    ubyte aim_precision;
    ubyte lock_speed;
    ubyte missile_lock_speed;
    ubyte radar_refresh_rate;
    ubyte ecm_resistance;
    ubyte rectification_head;
    ubyte rectification_core;
    ubyte rectification_arm;
    ubyte rectification_leg;
    ubyte horizontal_thrust_main;
    ubyte vertical_thrust;
    ubyte horizontal_thrust_side;
    ubyte Horizontal_thrust_back;
    ubyte quick_boost_main;
    ubyte quick_boost_side;
    ubyte quick_boost_back;
    ubyte quick_boost_overed;
    ubyte turning_ability;
    ubyte stability_head;
    ubyte stability_core;
    ubyte stability_legs;
    ubyte unk1C;
    ubyte unk1D;
    ubyte unk1E;
    ubyte unk1F;
} Tuning <bgcolor=cYellow>;

typedef struct
{
    Emblem image;
    ubyte width;
    ubyte height;
    ubyte unk86;
    ubyte unk87;
    Vector3 rotation;
    Vector3 position;
    float scale;
} DecalLayer <bgcolor=cBlue, optimize=false>;

typedef struct
{
    DecalLayer layers[8];
} Decal <bgcolor=cBlue>;

typedef struct
{
    Decal head;
    Decal core;
    Decal arm_right;
    Decal arm_left;
    Decal legs;
} Decals;

typedef struct
{
    if (exists(_DESIGN_ENCODING_WIDE) && _DESIGN_ENCODING_WIDE == 0)
    {
        char design_name[48];
        char designer_name[48];
    }
    else
    {
        wchar_t design_name[48];
        wchar_t designer_name[48];
    }

#ifdef _XBOX_TIME
    FILETIME creation_timestamp; // Standard Win32 filetime.
#else
    uquad creation_timestamp; // In microseconds, starting from 01/01/01 12:00:00, also known as gregorian time.
#endif
    ubyte protect : 1; // Depreciated and not enforced in ACFA, but still exists clearly as category is unaffected.
    ubyte category : 7;
    ubyte unkC9[15] <bgcolor=cBlack>; // Usually 0, sometimes has stuff like floats that may just be garbage from memory leaking.
    Parts parts;
    Tuning tuning;
    ubyte unk14A[2] <bgcolor=cBlack>; // Random, may be garbage from memory leaking.
    AcColorSet colors;
    Decals decals;
    Emblem emblem;
    Thumbnail thumbnail;
    ubyte unk5ED4[4] <bgcolor=cBlack>; // Usually 0, sometimes garbage like "MaxX" that may just be memory leaking.
} Design <bgcolor=cLtGreen, read=ReadDesign, optimize=false>;

wstring ReadDesign(Design& design)
{
    local string timeStr;
#ifdef _XBOX_TIME
    timeStr = FileTimeToString(design.creation_timestamp);
#else
    local double timestamp = (design.creation_timestamp / 31557600000000) + 1;
    timeStr = Str("%d", timestamp);
#endif

    if (timeStr == "1" && design.design_name == "" && design.designer_name == "")
    {
        return "";
    }
    
    if (exists(_DESIGN_ENCODING_WIDE) && _DESIGN_ENCODING_WIDE == 0)
    {
        return Str("%s / %s / %s", timeStr, StringToWString(design.design_name), StringToWString(design.designer_name));
    }
	
    return Str("%s / %s / %s", timeStr, design.design_name, design.designer_name);
}

//------------------------------------------------

// For design files like ACDES
// define _DESIGN_NO_CALL to prevent calling while using in DESDOC and APGD saves
#ifndef _DESIGN_NO_CALL
BigEndian();
Design design;
#endif