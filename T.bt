//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: T.bt
//   Authors: WarpZephyr
//   Version: 1.1.0
//   Purpose: Armored Core T archive files
//  Category: Archive
// File Mask: *.T
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();
#define BLOCK_SIZE 0x800

//------------------------------------------------

typedef struct
{
    short file_num;
    short start_block; // Guess
} Header <bgcolor=cLtRed, optimize=false>;

typedef struct (short previous_block)
{
    short next_block;

    local int block_count <hidden=true> = next_block - previous_block;
    
    if (block_count > 0)
    {
        // Seek to and get file, then seek back to the next header.
        local quad next_header_offset <hidden=true> = FTell();
        FSeek(previous_block * BLOCK_SIZE);
        ubyte data[block_count * BLOCK_SIZE];
        FSeek(next_header_offset);
    }
} File <bgcolor=cLtGreen, read=ReadFile>;

string ReadFile(File& file)
{
    return Str("%d | %d", file.next_block, file.block_count);
}

//------------------------------------------------

Header header;

struct
{
    local short previous_block <hidden=true> = header.start_block;
    local int i <hidden=true>;    
    for (i = 0; i < header.file_num; i++)
    {
        File file(previous_block);
        previous_block = file.next_block;
    }
} Files;