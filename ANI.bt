//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: ANI.bt
//   Authors: WarpZephyr, FatDuck (For work from FatImporter)
//   Version: 1.0.3
//   Purpose: Armored Core: For Answer ANI animation files
//  Category: Animation
// File Mask: *.ani
//  ID Bytes: 20 05 10 14
//   History: 
//------------------------------------------------

#include "Util.bt"
BigEndian();

//------------------------------------------------

enum <int> ObjectType
{
    Geom = 1,
    Dummy = 2
};

typedef struct
{
    short x;
    short y;
    short z;
} Vector3Short <read=ReadVector3Short>;

string ReadVector3Short(Vector3Short& vec)
{
    local string x <hidden=true> = TrimDecimalZeros(Str("%f", vec.x / 1000.0));
    local string y <hidden=true> = TrimDecimalZeros(Str("%f", vec.y / 1000.0));
    local string z <hidden=true> = TrimDecimalZeros(Str("%f", vec.z / 1000.0));
    return Str("<%s, %s, %s>", x, y, z);
}

//------------------------------------------------

typedef struct
{
    int version <format=hex>;

    Assert(version == 0x20051014
        || version == 0x60100910
        || version == 0xA0100910);
    
    int unk04; Assert(unk04 == 0 || unk04 == 25);
    int frameCount;
    int objectsOffset;
    int objectCount;
    int positionsOffset;
    int anglesOffset;
    int positionCount;
    int angleCount;
    int dataSize; // Does not include padding at the end of the file, except for 2 bytes sometimes for some reason

    local long fileSize = FileSize();
    Assert(dataSize == fileSize || dataSize < fileSize);
    if (dataSize < fileSize && dataSize > 0)
    {
        FSeek(dataSize);
        local int paddingSize = fileSize - dataSize;
        Null padding[paddingSize];
        FSeek(40);
    }

    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 1);
    byte unk30; Assert(unk30 == 1);
    byte unk31; Assert(unk31 == 1);
    byte unk32; Assert(unk32 == 0 || unk32 == 1);
    byte unk33; Assert(unk33 == 0);

    Null null[68];
} Header <bgcolor=cLtRed>;

typedef struct (int animationType)
{
    short keyTime;
    switch(animationType)
    {
        case 1:
            byte position;
			byte positionInTangent;
			byte positionOutTangent;
			byte angle;
			byte angleInTangent;
			byte angleOutTangent;
            break;
        case 2:
			short position;
		    short positionInTangent;
			short positionOutTangent;
			short angle;
			short angleInTangent;
			short angleOutTangent;
			short scale; Assert(scale == 1);
            break;
        case 4:
            short angle;
			short angleInTangent;
			short angleOutTangent;
            break;
        case 6:
            ubyte unk02;
            ubyte unk03;
            ubyte unk04;
            ubyte unk05;
            short unk06;
            break;
        case 7:
            short unk02;
            short unk04;
            short unk06;
            short unk08;
            short unk0A;
            break;
        case 9:
            short unk02;
            break;
        default:
            Assert(false);
            break;
    }
} KeyFrameInfo <bgcolor=cDkYellow, optimize=false>;

typedef struct
{
    int keyFramesOffset; Assert(keyFramesOffset >= FTell() + 36);
    int numKeyFrames;
    int animationType;
    
    Assert(animationType == 1
        || animationType == 2
        || animationType == 4
        || animationType == 6
        || animationType == 7
        || animationType == 9);
    Vector3 unk10;
    Vector3 unk20;
    int unk24; Assert(unk24 == 0);

    FSeek(keyFramesOffset);
    KeyFrameInfo keyFrames(animationType)[numKeyFrames];
} AnimationInfo <bgcolor=cYellow, optimize=false>;

typedef struct
{
    if (header.version != 0xA0100910)
    {
        int nameOffset;         Assert(nameOffset > 0);
        ObjectType type;        
        short objectIndex;        Assert(objectIndex < header.objectCount);
        short geomIndex;   Assert(type == Geom ? geomIndex < header.objectCount : geomIndex == -1);
        short parentIndex;  Assert(parentIndex < header.objectCount);
        short childIndex;       Assert(childIndex < header.objectCount);
        short nextSiblingIndex; Assert(nextSiblingIndex < header.objectCount);
        short unkIndex12;       Assert(unkIndex12 < header.objectCount);
        Vector3 translation;
        Vector3 rotation;
        Vector3 scale;
    }
    
    int animationOffset;

    if (header.version == 0x20051014)
    {
        Null null[184];
    }
    else if (header.version == 0x60100910 || header.version == 0xA0100910)
    {
        Null null[4];
    }
    else
    {
        Assert(false, Str("Unknown version: %d", header.version));
    }

    // Get offset data
    local quad end <hidden=true> = FTell();
    if (header.version != 0xA0100910)
    {
        FSeek(nameOffset);
        string name;
    }

    if(animationOffset > 0)
    {
        FSeek(animationOffset);
        AnimationInfo animation;
    }

    FSeek(end);
} Object <bgcolor=cLtGreen, read=ReadObject, optimize=false>;

string ReadObject(Object& object)
{
    if (exists(object.name))
    {
        return object.name;
    }
    
    return "";
}

//------------------------------------------------

Header header;

FSeek(header.positionsOffset);
Vector3 positions[header.positionCount] <bgcolor=cAqua>;

FSeek(header.anglesOffset);
Vector3Short angles[header.angleCount] <bgcolor=cDkAqua>;

FSeek(header.objectsOffset);
Object objects[header.objectCount];