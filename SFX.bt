//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: SFX.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: ACFA sfx files.
//  Category: 
// File Mask: sfx*.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

//------------------------------------------------

typedef struct
{
    float X;
    float Y;
    float Z;
} Vector3 <bgcolor=cBlack>;

//------------------------------------------------

typedef struct
{
    int offsetCount;
    int offsets[offsetCount];
} Header <bgcolor=cLtRed>;

typedef struct (int type)
{
    switch (type)
    {
        case 1:
            short unk00;
            short unk02;
            float unk04;
            break;
        case 3:
            int unk00;
            short unk04;
            short unk06;
            int unk08;
            Vector3 unk0C;
            break;
        default:
            Assert(false);
            break;
    }
} ValueEntry <bgcolor=cBlack>;

typedef struct
{
    int type;
    int offset04;
    int offset08;
    int offset0C;

    local quad pos = FTell();
    FSeek(offset04);
    //ValueEntry values(type);
    ubyte mark <bgcolor=cBlack>;
    FSeek(offset08);
    ubyte mark <bgcolor=cBlack>;
    FSeek(offset0C);
    ubyte mark <bgcolor=cBlack>;
    FSeek(pos);
} OffsetEntry <bgcolor=cYellow, read=ReadOffsetEntry, optimize=false>;

string ReadOffsetEntry(OffsetEntry& entry)
{
    local string str;
    return SPrintf(str, "%i | %i %i %i", entry.type, entry.offset04, entry.offset08, entry.offset0C);
}

typedef struct
{
    short type;
    short index;
    short previousSiblingIndex; Assert(previousSiblingIndex < index);
    short nextSiblingIndex; Assert(nextSiblingIndex > index || nextSiblingIndex == -1);
    short unk08;
    short unk0A;
    int unk0C; Assert(unk0C == 0);

    switch (type)
    {
        case 0:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            int unk18; Assert(unk18 == 0);
            int unk1C; Assert(unk1C == 0);
            float unk20;
            float unk24;
            float unk28;
            int unk2C; Assert(unk2C == 0);
            float unk30;
            float unk34;
            float unk38;
            float unk3C;
            float unk40;
            int unk44; Assert(unk44 == 0);
            float unk48;
            float unk4C;
            float unk50;
            OffsetEntry offsetEntries[7];
            break;
        case 2:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            float unk24;
            int unk28; Assert(unk28 == 0);
            float unk2C;
            float unk30;
            float unk34;
            int unk38; Assert(unk38 == 0);
            float unk3C;
            float unk40;
            float unk44;
            float unk48;
            float unk4C;
            float unk50;
            float unk54;
            ubyte unk58;
            ubyte unk59;
            ubyte unk5A;
            ubyte unk5B;
            ubyte unk5C;
            ubyte unk5D;
            ubyte unk5E;
            ubyte unk5F;
            int unk60; Assert(unk60 == 0);
            OffsetEntry offsetEntries[18];
            break;
        case 5:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            float unk24;
            float unk28;
            int unk2C; Assert(unk2C == 0);
            int unk30; Assert(unk30 == 0);
            float unk34;
            int unk38; Assert(unk38 == 0);
            int unk3C; Assert(unk3C == 0);
            short unk40;
            short unk42;
            short unk44;
            short unk46;
            short unk48;
            short unk4A;
            int unk4C; Assert(unk4C == 0);
            short unk50;
            short unk52;
            int unk54; Assert(unk54 == 0);
            OffsetEntry offsetEntries[6];
            break;
        case 8:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            float unk18;
            float unk1C;
            float unk20;
            float unk24;
            float unk28;
            float unk2C;
            float unk30;
            float unk34;
            int unk38; Assert(unk38 == 0);
            float unk3C;
            float unk40;
            float unk44;
            short unk48;
            short unk4A;
            OffsetEntry offsetEntries[4];
            break;
        case 9:
            short unk10;
            short unk12;
            ubyte unk14;
            ubyte unk15;
            ubyte unk16;
            ubyte unk17;
            int unk18; Assert(unk18 == 0);
            int unk1C; Assert(unk1C == 0);
            int unk20; Assert(unk20 == 0);
            float unk24;
            float unk28;
            float unk2C;
            float unk30;
            int unk34; Assert(unk34 == 0);
            int unk38; Assert(unk38 == 0);
            int unk3C; Assert(unk3C == 0);
            int unk40; Assert(unk40 == 0);
            int unk44; Assert(unk44 == 0);
            ubyte unk48;
            ubyte unk49;
            ubyte unk50;
            ubyte unk51;
            OffsetEntry offsetEntries[4];
            break;
        case 10:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            float unk18;
            float unk1C;
            float unk20;
            float unk24;
            float unk28;
            int unk2C; Assert(unk2C == 0);
            float unk30;
            float unk34;
            float unk38;
            int unk3C; Assert(unk3C == 0);
            int unk40; Assert(unk40 == 0);
            int unk44; Assert(unk44 == 0);
            ubyte unk48;
            ubyte unk49;
            ubyte unk4A;
            ubyte unk4B;
            OffsetEntry offsetEntries[6];
            break;
        case 11:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            int unk18; Assert(unk18 == 0);
            int unk1C; Assert(unk1C == 0);
            float unk20;
            float unk24;
            int unk28; Assert(unk28 == 0);
            int unk2C; Assert(unk2C == 0);
            int unk30; Assert(unk30 == 0);
            int unk34; Assert(unk34 == 0);
            int unk38; Assert(unk38 == 0);
            OffsetEntry offsetEntries[14];
            break;
        case 17:
            short unk10;
            short unk12;
            short unk14;
            short unk16; Assert(unk16 == 0);
            short unk18;
            short unk1A;
            int unk1C; Assert(unk1C == 0);
            short unk20;
            short unk22;
            short unk24;
            short unk26;
            short unk28;
            short unk2A;
            short unk2C;
            short unk2E;
            short unk30;
            short unk32;
            short unk34;
            short unk36;
            short unk38;
            short unk3A;
            short unk3C;
            short unk3E;
            short unk40;
            short unk42;
            OffsetEntry offsetEntries[2];
            break;
        case 19:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            int unk18; Assert(unk18 == 0);
            int unk1C; Assert(unk1C == 0);
            int unk20; Assert(unk20 == 0);
            ubyte unk24;
            ubyte unk25;
            ubyte unk26;
            ubyte unk27;
            int unk28; Assert(unk28 == 0);
            OffsetEntry offsetEntries[6];
            break;
        case 21:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            float unk20;
            float unk24;
            int unk28; Assert(unk28 == 0);
            float unk2C;
            int unk30; Assert(unk30 == 0);
            float unk34;
            float unk38;
            float unk3C;
            float unk40;
            float unk44;
            short unk48;
            short unk4A;
            short unk4C;
            short unk4E;
            float unk50;
            int unk54; Assert(unk54 == 0);
            ubyte unk58;
            ubyte unk59;
            ubyte unk5A;
            ubyte unk5B;
            OffsetEntry offsetEntries[12];
            break;
        case 22:
            float unk10;
            float unk14;
            float unk18;
            float unk1C;
            OffsetEntry offsetEntries[2];
            break;
        case 23:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            short unk24;
            short unk26;
            float unk28;
            int unk2C; Assert(unk2C == 0);
            float unk30;
            float unk34;
            float unk38;
            float unk3C;
            short unk40;
            short unk42;
            float unk44;
            float unk48;
            float unk4C;
            float unk50;
            float unk54;
            short unk56;
            short unk58;
            ubyte unk5A; 
            ubyte unk5B; 
            ubyte unk5C; 
            ubyte unk5D;
            ubyte unk5E; 
            ubyte unk5F; 
            ubyte unk60; 
            ubyte unk61;
            OffsetEntry offsetEntries[16];
            break;
        case 28:
            short unk10;
            short unk12;
            int unk14; Assert(unk14 == 0);
            int unk16; Assert(unk16 == 0);
            int unk18; Assert(unk18 == 0);
            int unk1A; Assert(unk1A == 0);
            int unk1C; Assert(unk1C == 0);
            int unk1E; Assert(unk1E == 0);
            float unk20;
            float unk24;
            float unk28;
            float unk2C;
            OffsetEntry offsetEntries[2];
            break;
        case 31:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            short unk24;
            short unk26;
            float unk28;
            float unk2C;
            float unk30;
            float unk34;
            float unk38;
            float unk3C;
            short unk40;
            short unk42;
            float unk44;
            float unk48;
            float unk4C;
            float unk50;
            float unk54;
            short unk58;
            short unk5A;
            ubyte unk5C;
            ubyte unk5D;
            ubyte unk5E;
            ubyte unk5F;
            ubyte unk60;
            ubyte unk61;
            short unk62;
            OffsetEntry offsetEntries[16];
            break;
        case 32:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            int unk18; Assert(unk18 == 0);
            int unk1A; Assert(unk1A == 0);
            int unk1C; Assert(unk1C == 0);
            int unk1E; Assert(unk1E == 0);
            int unk1C; Assert(unk1C == 0);
            int unk20; Assert(unk20 == 0);
            int unk24; Assert(unk24 == 0);
            int unk28; Assert(unk28 == 0);
            int unk2C; Assert(unk2C == 0);
            int unk30; Assert(unk30 == 0);
            int unk34; Assert(unk34 == 0);
            int unk38; Assert(unk38 == 0);
            short unk3C;
            short unk3E;
            OffsetEntry offsetEntries[4];
            break;
        case 33:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            int unk24; Assert(unk24 == 0);
            float unk28;
            int unk2C; Assert(unk2C == 0);
            float unk30;
            float unk34;
            float unk38;
            float unk3C;
            short unk40;
            short unk42;
            int unk44; Assert(unk44 == 0);
            float unk48;
            float unk4C;
            float unk50;
            float unk54;
            short unk58;
            short unk5A;
            ubyte unk5C;
            ubyte unk5D;
            ubyte unk5E;
            ubyte unk5F;
            ubyte unk60;
            ubyte unk61;
            ubyte unk62;
            ubyte unk63;
            OffsetEntry offsetEntries[16];
            break;
        case 36:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            short unk20;
            short unk22;
            int unk24; Assert(unk24 == 0);
            int unk28; Assert(unk28 == 0);
            int unk2C; Assert(unk2C == 0);
            int unk30; Assert(unk30 == 0);
            float unk34;
            float unk38;
            float unk3C;
            ubyte unk40;
            ubyte unk41;
            ubyte unk42;
            ubyte unk43;
            float unk44;
            int unk48; Assert(unk48 == 0);
            int unk4C; Assert(unk4C == 0);
            float unk50;
            float unk54;
            short unk58;
            short unk5A;
            ubyte unk5C;
            ubyte unk5D;
            ubyte unk5E;
            ubyte unk5F;
            ubyte unk60;
            ubyte unk61;
            ubyte unk62;
            ubyte unk63;
            OffsetEntry offsetEntries[19];
            break;
        case 43:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            float unk18;
            float unk1C;
            float unk20;
            float unk24;
            float unk28;
            float unk2C;
            float unk30;
            float unk34;
            float unk38;
            int unk3C; Assert(unk3C == 0);
            int unk40; Assert(unk40 == 0);
            int unk44; Assert(unk44 == 0);
            OffsetEntry offsetEntries[3];
            break;
        case 44:
            short unk10;
            short unk12;
            short unk14;
            short unk16;
            short unk18;
            short unk1A;
            short unk1C;
            short unk1E;
            float unk20;
            float unk24;
            int unk28; Assert(unk28 == 0);
            float unk2C;
            int unk30; Assert(unk30 == 0);
            int unk34; Assert(unk34 == 0);
            int unk38; Assert(unk38 == 0);
            ubyte unk3C;
            ubyte unk3D;
            ubyte unk3E;
            ubyte unk3F;
            int unk40; Assert(unk40 == 0);
            float unk44;
            int unk48; Assert(unk48 == 0);
            ubyte unk4C;
            ubyte unk4D;
            ubyte unk4E;
            ubyte unk4F;
            OffsetEntry offsetEntries[9];
            break;
        default:
            Assert(false);
    }
} Entry <bgcolor=cLtGreen, read=ReadEntry, optimize=false>;

string ReadEntry(Entry& entry)
{
    local string str;
    return SPrintf(str, "%i %i", entry.type, entry.unk0A);
}

//------------------------------------------------

Header header;

struct
{
    local int i <hidden=true>;
    for (i = 0; i < header.offsetCount; i++) 
    {
        FSeek(header.offsets[i]);
        Entry entry;
        Assert(entry.index == i);
    }
} Entries;