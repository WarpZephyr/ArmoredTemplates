//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: AssemMenu.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: ACFA assembly menu display binary.
//  Category: Menu
// File Mask: assemmenu.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
local ubyte HEADER_SIZE = 36;
local ubyte TEXT_SIZE = 8;
local ubyte PARAMLIST_SIZE = 8;
local ubyte UNK3_SIZE = 8;
local ubyte STAT_SIZE = 8;
local ubyte PARAM_SIZE = 16;
local ubyte UNK6_SIZE = 8;
local quad HEADER_OFFSET;
local quad TEXT_OFFSET;
local quad PARAMLIST_OFFSET;
local quad UNK3_OFFSET;
local quad STAT_OFFSET;
local quad PARAM_OFFSET;
local quad UNK6_OFFSET;
local quad TEXT_DATA_OFFSET;

enum <ushort> StatImprovement
{
    Default = 0,

    // When the new stat is greater than the old stat it is an improvement
    GreaterThan = 1,
    
    // When the new stat is less than the old stat it is an improvement  
    LessThan = 2
};

//------------------------------------------------

typedef struct
{
    HEADER_OFFSET = FTell();
    uint countText;
    uint countParamList;
    uint countUnk3;
    uint countParam;
    uint countUnk6;
    uint countStat;
    uint unk18; Assert(unk18 == 0);
    uint unk1C; Assert(unk1C == 0);
    uint unk20; Assert(unk20 == 0);

    local quad sizeTexts = countText * TEXT_SIZE;
    local quad sizeParamLists = countParamList * PARAMLIST_SIZE;
    local quad sizeUnk3s = countUnk3 * UNK3_SIZE;
    local quad sizeStats = countStat * STAT_SIZE;
    local quad sizeParams = countParam * PARAM_SIZE;
    local quad sizeUnk6s = countUnk6 * UNK6_SIZE;
    TEXT_OFFSET = HEADER_SIZE;
    PARAMLIST_OFFSET = TEXT_OFFSET + sizeTexts;
    UNK3_OFFSET = PARAMLIST_OFFSET + sizeParamLists;
    STAT_OFFSET = UNK3_OFFSET + sizeUnk3s;
    PARAM_OFFSET = STAT_OFFSET + sizeStats;
    UNK6_OFFSET = PARAM_OFFSET + sizeParams;
    TEXT_DATA_OFFSET = UNK6_OFFSET + sizeUnk6s;
} Header <bgcolor=cLtRed>;

typedef struct
{
    uint id;
    uint offset;
    local uint _textOffset <hidden=true> = TEXT_DATA_OFFSET + offset;

    local quad pos <hidden=true> = FTell();
    FSeek(TEXT_DATA_OFFSET + offset);
    wstring str;
    ushort padding; Assert(padding == 0);
    FSeek(pos);
} Text <bgcolor=cLtGreen, read=ReadText, optimize=false>;

wstring ReadText(Text& entry)
{
    return Str("ID: %d | %s", entry.id, entry.str);
}

typedef struct
{
    uint unk00; Assert(unk00 >= 0 && unk00 <= 5);
    uint unk04;
} Unk6 <bgcolor=cDkYellow, read=ReadUnk6, optimize=false>;

string ReadUnk6(Unk6& entry)
{
    return Str("%d/%d", entry.unk00, entry.unk04);
}

typedef struct
{
    ushort id;
    ushort unk6Count;
    uint unk6Index;
} Unk3 <bgcolor=cDkGreen, read=ReadUnk3, optimize=false>;

string ReadUnk3(Unk3& entry)
{
    return Str("ID: %d | Unk6 Cnt/Indx: %d/%d", entry.id, entry.unk6Count, entry.unk6Index);
}

typedef struct
{
    ushort id;
    ushort unk3ID;
    StatImprovement improvementType;
    ushort unk06 <hidden=true>; Assert(unk06 == 0);
} Stat <bgcolor=cLtYellow, read=ReadStat, optimize=false>;

string ReadStat(Stat& entry)
{
    return Str("ID: %d | Unk3ID: %d | %s", entry.id, entry.unk3ID, EnumToString(entry.improvementType));
}

typedef struct
{
    ushort nameTextID;
    ushort descTextID;
    ushort statID;
    ushort unk06 <hidden=true>; Assert(unk06 == 0);
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    uint unk0C <hidden=true>; Assert(unk0C == 0);
} Param <bgcolor=cYellow, read=ReadParam, optimize=false>;

wstring ReadParam(Param& entry)
{
    return Str("Name: %d | Desc: %d | Stat: %d", entry.nameTextID, entry.descTextID, entry.statID);
}

typedef struct
{
    ushort id;
    ushort paramCount;
    uint paramIndex;
} ParamList <bgcolor=cGreen, read=ReadParamList, optimize=false>;

string ReadParamList(ParamList& entry)
{
    return Str("ID: %d | Params: %d (+%d)", entry.id, entry.paramIndex, entry.paramCount);
}

//------------------------------------------------

Header header;
Text texts[header.countText];
ParamList paramLists[header.countParamList];
Unk3 unk3s[header.countUnk3];
Stat stats[header.countStat];
Param params[header.countParam];
Unk6 unk6s[header.countUnk6];
