//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: Event.bt
//   Authors: WarpZephyr
//   Version: 1.1.1
//   Purpose: Armored Core Verdict Day Events.
//  Category: Maps
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> EventType
{
    EventTypeLight = 100, // An event holding light parameters.
    EventTypeScene = 101, // An event holding scene parameters such as render distance.
    EventTypeWind = 102,  // An event holding wind parameters.
    EventTypeRain = 103,  // An event holding rain parameters.
    EventTypeBGM = 400,   // An event referencing what background game music should be played.
};

// EventScene Sub Sub Structs
// TODO: Clean up.
//------------------------------------------------

typedef struct
{
    int unk00; // Type?
    switch (unk00)
    {
        case 0:
        case 1:
        case 3:
        case 10:
            byte unk04;
            byte unk05;
            byte unk06;
            byte unk07;
            float unk08;
            byte unk0C;
            byte unk0D;
            byte unk0E;
            byte unk0F;
            byte unk10;
            byte unk11;
            byte unk12;
            byte unk13;
            Null null[12];
            break;
        case -1:
        case 2:
        case 4:
        case 6:
        case 8:
            byte unk04;
            byte unk05;
            byte unk06;
            byte unk07;
            float unk08;
            float unk0C;
            byte unk10;
            byte unk11;
            byte unk12;
            byte unk13;
            Null null[12];
            break;
        case 5:
        case 7:
            float unk04;
            float unk08;
            float unk0C;
            byte unk10;
            byte unk11;
            byte unk12;
            byte unk13;
            Null null[12];
            break;
        default:
            Assert(false);
    }
} EventSceneUnk0C34 <read=ReadEventSceneUnk0C34>;

string ReadEventSceneUnk0C34(EventSceneUnk0C34 &unk)
{
    local string str;
    return SPrintf(str, "%d", unk.unk00);
}

typedef struct
{
    int unk00;
    float unk04;
    int unk08;
    short unk0C;
    short unk0E;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    short unk24;
    short unk26;
    short unk28;
    short unk2A;
    Null null[20];
} EventSceneUnk0C8C;

typedef struct
{
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    byte unk10;
    byte unk11;
    byte unk12;
    byte unk13;
    Null null[12];
} EventSceneUnk0C90;

// EventScene Sub Structs
// TODO: Clean up.
//------------------------------------------------

typedef struct
{
    short unk00;
    short unk02;
    float globalDrawDistance;
    float unk08;
    float unk0C;
    float unk10;
    short unk14;
    short unk16;
    float unk18;
    float unk1C;
    float unk20;
    ubyte unk24;
    ubyte unk25;
    ubyte unk26;
    ubyte unk27;
    float unk28;
    float unk2C;
    short unk30;
    short unk32;
    float unk34;
    float unk38;
    short unk3C;
    short unk3E;
    short unk40;
    short unk42;
    short unk44;
    short unk46;
    short unk48;
    short unk4A;
    short unk4C;
    short unk4E;
    short unk50;
    short unk52;
    short unk54;
    short unk56;
    float unk58;
    float unk5C;
    Null null[416];
} EventSceneUnk00;

typedef struct
{
    ubyte unk00;
    ubyte unk01;
    ubyte unk02;
    ubyte unk03;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    short unk2C;
    short unk2E;
    Null null[80];
} EventSceneUnk04;

typedef struct
{
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    short unk18;
    short unk1A;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    int unk48;
    float unk4C;
    float unk50;
    float unk54;
    float unk58;
    float unk5C;
    float unk60;
    Null null[28];
} EventSceneUnk08;

typedef struct
{
    local quad start = FTell();

    // Read Data
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    uint offsets34[22];
    uint offset8C;
    uint offset90;
    Null null[108];

    // Get Offset Structs
    if (offsets34[0] > 0)
    {
        struct
        {
            local int i <hidden=true>;
            for (i = 0; i < 22; i++)
            {
                if (offsets34[i] > 0)
                {
                    FSeek(start + offsets34[i]);
                    EventSceneUnk0C34 eventSceneUnk0C34;
                }
            }
        } eventScene0C34s;
    }
    
    if (offset8C > 0)
    {
        FSeek(start + offset8C);
        EventSceneUnk0C8C eventSceneUnk0C8C;
    }

    if (offset90 > 0)
    {
        FSeek(start + offset90);
        EventSceneUnk0C90 eventSceneUnk0C90;
    }
} EventSceneUnk0C;

typedef struct
{
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    ubyte unk28;
    ubyte unk29;
    ubyte unk2A;
    ubyte unk2B;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    float unk48;
    float unk4C;
    float unk50;
    float unk54;
    float unk58;
    float unk5C;
    float unk60;
    float unk64;
    float unk68;
    float unk6C;
    float unk70;
    float unk74;
    float unk78;
    float unk7C;
} EventSceneUnk10;

typedef struct
{
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    Null null[64]; // Originally offsets
} EventSceneUnk14;

typedef struct
{
    ubyte unk00;
    Null null[63];
} EventSceneUnk18;

typedef struct
{
    short unk00;
    short unk02;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    short unk1C;
    short unk1E;
    float unk20;
    float unk24;
    ubyte unk28;
    ubyte unk29;
    ubyte unk2A;
    ubyte unk2B;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    Null null[56];
} EventSceneUnk1C;

typedef struct
{
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk12;
    float unk14;
    float unk18;
    float unk20;
    float unk22;
    float unk24;
    float unk28;
    float unk30;
    float unk32;
    float unk34;
    float unk38;
} EventSceneUnk20;

typedef struct
{
    int unk00;
    float unk04;
    float unk08;
    float unk0C;
    float unk10;
    float unk12;
    float unk14;
    float unk18;
    float unk20;
    float unk22;
    float unk24;
    float unk28;
    float unk30;
    float unk32;
    float unk34;
    float unk38;
} EventSceneUnk24;

// EventLight Sub Structs
//------------------------------------------------

typedef struct
{
    float red;
    float green;
    float blue;
    float unk0C; // Intensity?
} Bloom;

typedef struct
{
    // Seems to determine the positioning of the bloom source
    short unk00;
    short unk02;

    Bloom bloom_1;
    Bloom bloom_2;
} BloomPoint;

// EventType Structs
//------------------------------------------------

typedef struct
{
    short unk00;
    short unk02;
    BloomPoint bloom_point_1;
    BloomPoint bloom_point_2;
    short unk4C;
    short unk4E;
    float unk50;
    float unk54;
    float unk58;
    float unk5C;
    float unk60;
    float unk64;
    float unk68;
    float unk6C;
    float unk70;
    float unk74;
    float unk78;
    float unk7C;
    float unk80;
    float unk84;
    float unk88;
    float unk8C;
    float unk90;
    float unk94;
    float unk98;
    float unk9C;
    float unk100;
    float unk104;
    float unk108;
    float unk10C;
    float unk110;
    float unk114;
    float unk118;
    float unk11C;
    float unk120;
    float unk124;
    ubyte unk128;
    ubyte unk129;
    ubyte unk12A;
    ubyte unk12B;
    float unk12C;
    float unk130;
    float unk134;
    float unk138;
    float unk13C;
    float unk140;
    float unk144;
    float unk148;
    float unk14C;
    float unk150;
    float unk154;
    float unk158;
    float unk15C;
} EventLight <optimize=true>;

typedef struct
{
    local quad start = FTell();

    // Read Data
    int offset00;
    int offset04;
    int offset08;
    int offset0C;
    int offset10;
    int offset14;
    int offset18;
    int offset1C;
    int offset20;
    int offset24;
    Null null[24]; // Originally Offsets

    // Get Offset Structs
    FSeek(start + offset00);
    EventSceneUnk00 eventSceneUnk00;

    FSeek(start + offset04);
    EventSceneUnk04 eventSceneUnk04;

    FSeek(start + offset08);
    EventSceneUnk08 eventSceneUnk08;

    FSeek(start + offset0C);
    EventSceneUnk0C eventSceneUnk0C;

    FSeek(start + offset10);
    EventSceneUnk10 eventSceneUnk10;

    FSeek(start + offset14);
    EventSceneUnk14 eventSceneUnk14;

    FSeek(start + offset18);
    EventSceneUnk18 eventSceneUnk18;

    FSeek(start + offset1C);
    EventSceneUnk1C eventSceneUnk1C;

    FSeek(start + offset20);
    EventSceneUnk20 eventSceneUnk20;

    if (offset24 > 0)
    {
        FSeek(start + offset24);
        EventSceneUnk24 eventSceneUnk24;
    }
} EventScene;

typedef struct
{
    ubyte unk00;
    ubyte unk01;
    short unk02;
    short unk04;
    short unk06;
    float windPower;
    Null null[20];
} EventWind;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    float unk0C;
    float unk10;
    short unk14;
    short unk16;
    float unk18;
    float unk1C;
    float unk20;
    int unk24;
    Null null[24];
} EventRain;

typedef struct
{
    int bgmID;
    int unk04;
    Null null[56];
} EventBGM;

// Main Struct
//------------------------------------------------

typedef struct
{
    local quad start = FTell();
    
    // Read Data
    int nameOffset; Assert(nameOffset > 0);
    int uniqueID;
    EventType type;
    int id;
    int typeDataOffset;
    
    // Get Offset Structs
    FSeek(start + nameOffset);
    string name;
    
    if (typeDataOffset > 0)
    {
        FSeek(start + typeDataOffset);
        switch (type)
        {
            case EventTypeLight: EventLight light; break;
            case EventTypeScene: EventScene scene; break;
            case EventTypeWind:  EventWind wind; break;
            case EventTypeRain: EventRain rain; break;
            case EventTypeBGM: EventBGM bgm; break;
            default: Assert(false);
        }
    }
} Event <read=ReadEvent>;

string ReadEvent(Event& event)
{
    local string str;
    local string type;
    local string name = "";

    switch (event.type)
    {
        case EventTypeLight: type = "Light"; break;
        case EventTypeScene: type = "Scene"; break;
        case EventTypeWind: type = "Wind"; break;
        case EventTypeRain: type = "Rain"; break;
        case EventTypeBGM: type = "BGM"; break;
        default: type = "UnknownType";
    }

    if (event.name != name)
    {
        name = " | " + event.name;
    }

    return SPrintf(str, "ID: %d | %s%s", event.id, type, name);
}