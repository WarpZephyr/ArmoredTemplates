//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: MSBV.bt
//   Authors: WarpZephyr
//   Version: 1.1.1
//   Purpose: Armored Core V map layouts.
//  Category: Maps
// File Mask: *.msb
//  ID Bytes:
//   History: 
//------------------------------------------------

#include "..\..\Util.bt"
#include "..\MSB.bt"
#include "Model.bt"
#include "Event.bt"
#include "Point.bt"
#include "Route.bt"
#include "Layer.bt"
#include "Part.bt"
#include "Tree.bt"

BigEndian();
local int VARINT_LONG = 0;
local int i <hidden=true>;

//------------------------------------------------

typedef struct
{
    Param param(-1, "MODEL_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Model model;
    }
    FSeek(param.nextParamOffset.val);
} ModelParam <read=ReadModelParam, bgcolor=cLtGreen>;

string ReadModelParam(ModelParam& modelParam)
{
    return ReadParam(modelParam.param);
}

typedef struct
{
    Param param(-1, "EVENT_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Event event;
    }
    FSeek(param.nextParamOffset.val);
} EventParam <read=ReadEventParam, bgcolor=cYellow>;

string ReadEventParam(EventParam& eventParam)
{
    return ReadParam(eventParam.param);
}


typedef struct
{
    Param param(-1, "POINT_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Point point;
    }
    FSeek(param.nextParamOffset.val);
} PointParam <read=ReadPointParam, bgcolor=cAqua>;

string ReadPointParam(PointParam& pointParam)
{
    return ReadParam(pointParam.param);
}

typedef struct
{
    Param param(-1, "ROUTE_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Route route;
    }
    FSeek(param.nextParamOffset.val);
} RouteParam <read=ReadRouteParam, bgcolor=cDkAqua>;

string ReadRouteParam(RouteParam& routeParam)
{
    return ReadParam(routeParam.param);
}

typedef struct
{
    Param param(-1, "LAYER_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Layer layer;
    }
    FSeek(param.nextParamOffset.val);
} LayerParam <read=ReadLayerParam, bgcolor=cLtAqua>;

string ReadLayerParam(LayerParam& layerParam)
{
    return ReadParam(layerParam.param);
}

typedef struct
{
    Param param(-1, "PARTS_PARAM_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        Part part;
    }
} PartsParam <read=ReadPartsParam, bgcolor=cBlue>;

string ReadPartsParam(PartsParam& partsParam)
{
    return ReadParam(partsParam.param);
}

typedef struct
{
    Param param(-1, "MAPSTUDIO_TREE_ST", 0);
    for (i = 0; i < param.count - 1; i++)
    {
        FSeek(param.offsets[i].val);
        TreeNode node;
    }
} MapstudioTree <read=ReadMapstudioTree, bgcolor=cLtBlue>;

string ReadMapstudioTree(MapstudioTree& mapstudioTree)
{
    return ReadParam(mapstudioTree.param);
}


//------------------------------------------------

ModelParam models;
EventParam events;
PointParam points;
RouteParam routes;
LayerParam layers;
PartsParam parts;

if (parts.param.nextParamOffset.val > 0)
{
    local int nextParamOffset <hidden=true> = parts.param.nextParamOffset.val;
    while (nextParamOffset != 0)
    {
        FSeek(nextParamOffset);
        MapstudioTree trees;
        nextParamOffset = trees.param.nextParamOffset.val;
    }
    Assert(trees[1].param.nextParamOffset.val == 0);
}