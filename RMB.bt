//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: RMB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Pad rumble files
//  Category: Dantelion
// File Mask: *.rmb
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Util.bt"
BigEndian();

//------------------------------------------------

typedef struct
{
    local quad start <hidden=true> = FTell();

    int nameOffset;
    int sibOffset;
    int nameOffset2;
    int unk0C;
    int offset10;
    int dataOffset;

    FSeek(start + nameOffset);
    string name;

    FSeek(start + sibOffset);
    string sibPath;

    FSeek(start + nameOffset2);
    string name2;

    if (offset10 > 0)
    {
        FSeek(start + offset10);
        ubyte entityUnk10[32];
    }

    FSeek(start + dataOffset);
    int dataSize;
    
    ubyte data[dataSize];
    Null padding[60] <hidden=true, bgcolor=cBlack>;
} Entity <bgcolor=cGreen, optimize=false>;

typedef struct
{
    int offset;
    local quad end <hidden=true> = FTell();

    FSeek(offset);
    Entity entity;
    FSeek(end);
} OffsetEntity <bgcolor=cLtGreen, optimize=false>;

typedef struct
{
    local quad start <hidden=true> = FTell();

    int nameOffset;
    int sibOffset;
    int strEndOffset;

    FSeek(start + nameOffset);
    string name;

    FSeek(start + sibOffset);
    string sibPath;

    FSeek(start + strEndOffset);
    Null padding[128] <hidden=true, bgcolor=cBlack>;
} Rumble <bgcolor=cYellow, optimize=false>;

typedef struct
{
    int offset;
    local quad end <hidden=true> = FTell();

    FSeek(offset);
    Rumble rumble;
    FSeek(end);
} OffsetRumble <bgcolor=cLtYellow, optimize=false>;

typedef struct
{
    local quad start <hidden=true> = FTell();

    int nameOffset;
    int offset04;
    int count04;
    int offset0C;
    int count0C;
    int offset14;
    int strEndOffset;

    FSeek(start + nameOffset);
    string name;

    FSeek(start + offset04);
    int unk04s[count04];

    FSeek(start + offset0C);
    int unk0Cs[count0C];

    FSeek(start + strEndOffset);
    int unk2C;
    Null unk30[124] <bgcolor=cBlack, hidden=true>;
} Parts <bgcolor=cBlue, optimize=false>;

typedef struct
{
    int offset;
    local quad end <hidden=true> = FTell();

    FSeek(offset);
    Parts parts;
    FSeek(end);
} OffsetParts <bgcolor=cLtBlue, optimize=false>;

typedef struct
{
    local quad start <hidden=true> = FTell();

    int nameOffset;
    int offset04;
    int count08;
    int offset0C;
    int count10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;

    FSeek(start + nameOffset);
    string name;
} Cut <bgcolor=cAqua, optimize=false>;

typedef struct
{
    int offset;
    local quad end <hidden=true> = FTell();

    FSeek(offset);
    Cut cut;
    FSeek(end);
} OffsetCut <bgcolor=cLtAqua, optimize=false>;

typedef struct
{
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int fileSize; Assert(fileSize == FileSize());
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int offsetEntities;
    int countEntity;
    int offsetRumbles;
    int countRumble;
    int offsetParts;
    int countParts;
    int offsetCuts;
    int countCut;
    int unk40 <hidden=true>; Assert(unk40 == 0);

    local quad start <hidden=true> = FTell();

    FSeek(offsetEntities);
    OffsetEntity entities[countEntity];

    FSeek(offsetRumbles);
    OffsetRumble rumbles[countRumble];

    FSeek(offsetParts);
    OffsetParts parts[countParts];

    FSeek(offsetCuts);
    OffsetCut cuts[countCut];

    FSeek(start);
} RMB <bgcolor=cLtRed>;

//------------------------------------------------

RMB rmb;
