//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: AcAttachInfo.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Reading AcAttachInfo.bin.
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

//------------------------------------------------

enum <ubyte> Category
{
    Head = 0,
    Core = 1,
    Arms = 2,
    Legs = 3
};

typedef struct
{
    int entryCount;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} Header <bgcolor=cLtRed>;

typedef struct (int namesOffset)
{
    Category category;
    ubyte id;
    ubyte unk02;
    ubyte unk03;
    int nameOffset;
    int unk08 <hidden=true>; Assert(unk08 == 0);
    ubyte unk0C; Assert(unk0C == 0 || unk0C == 1);
    ubyte unk0E <hidden=true>; Assert(unk0E == 0);
    short unk10 <hidden=true>; Assert(unk0E == 0);

    local long pos = FTell();
    FSeek(namesOffset + nameOffset);
    string boneName;
    FSeek(pos);
} Entry <bgcolor=cLtGreen, read=ReadEntry, optimize=false>;

string ReadEntry(Entry& entry)
{
    return Str("%s | %s | [%d,%d,%d,%d]", entry.boneName, EnumToString(entry.category), entry.id, entry.unk02, entry.unk03, entry.unk0C );
}

//------------------------------------------------

Header header;
Entry entries((header.entryCount * 16) + 16)[header.entryCount];