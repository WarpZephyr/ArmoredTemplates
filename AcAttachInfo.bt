//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: AcAttachInfo.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Reading AcAttachInfo.bin.
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

enum <ubyte> PartCategory
{
    Head = 0,
    Core = 1,
    Arms = 2,
    Legs = 3,
    FCS = 4,
    Generator = 5,
    MainBooster = 6,
    BackBooster = 7,
    SideBooster = 8,
    OveredBooster = 9,
    RightArmUnit = 10,
    LeftArmUnit = 11,
    RightBackUnit = 12,
    LeftBackUnit = 13,
    ShoulderUnit = 14,
    HangerR = 15,
    HangerL = 16,
    HeadTop = 17,
    HeadLeft = 18,
    HeadRight = 19,
    CoreUpperRight = 20,
    CoreUpperLeft = 21,
    CoreLowerRight = 22,
    CoreLowerLeft = 23,
    RightArmStabilizer = 24,
    LeftArmStabilizer = 25,
    LegsBack = 26,
    LegsRightUpper = 27,
    LegsLeftUpper = 28,
    LegsRightBackUpper = 29,
    LegsLeftBackUpper = 30,
    LegsRightMiddle = 31,
    LegsLeftMiddle = 32,
    LegsRightBackMiddle = 33,
    LegsLeftBackMiddle = 34,
    LegsRightLower = 35,
    LegsLeftLower = 36,
    LegsRightBackLower = 37,
    LegsLeftBackLower = 38,
    VOB = 39
};

//------------------------------------------------

typedef struct
{
    int entryCount;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} Header <bgcolor=cLtRed>;

typedef struct (int namesOffset)
{
    PartCategory srcCategory;
    ubyte id;
    PartCategory destCategory;
    ubyte unk03;
    int nameOffset;
    int unk08 <hidden=true>; Assert(unk08 == 0);
    ubyte unk0C; Assert(unk0C == 0 || unk0C == 1);
    ubyte unk0E <hidden=true>; Assert(unk0E == 0);
    short unk10 <hidden=true>; Assert(unk0E == 0);

    local long pos = FTell();
    FSeek(namesOffset + nameOffset);
    string boneName;
    FSeek(pos);
} Entry <bgcolor=cLtGreen, read=ReadEntry, optimize=false>;

string ReadEntry(Entry& entry)
{
    return Str("(%s, %s) | %s | [%d,%d,%d]", EnumToString(entry.srcCategory), EnumToString(entry.destCategory), entry.boneName, entry.id, entry.unk03, entry.unk0C );
}

//------------------------------------------------

Header header;
Entry entries((header.entryCount * 16) + 16)[header.entryCount];