//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: SFX.bt
//   Authors: WarpZephyr
//   Version: 1.1.0
//   Purpose: Armored Core: For Answer SFX files.
//  Category: Effects
// File Mask: sfx*.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

// Template Options
//------------------------------------------------

// Hide a read style by commenting it out
// Show a read style by leaving it uncommented
#define READ_TREE // Reads entry children inside of an entry leading to a tree style view
//#define READ_FLAT // Reads entries flat in an array

// Enum Definitions
//------------------------------------------------

enum <short> EffectType
{
    EffectType0 = 0,
    EffectType2 = 2,
    EffectType5 = 5,
    EffectType8 = 8,
    EffectType9 = 9,
    EffectType10 = 10,
    EffectType11 = 11, // Colored Light Spheres?
    EffectType12 = 12,
    EffectType13 = 13,
    EffectType16 = 16,
    EffectType17 = 17,
    EffectType19 = 19,
    EffectType21 = 21,
    EffectType22 = 22, // Root effect?
    EffectType23 = 23,
    EffectType28 = 28,
    EffectType31 = 31,
    EffectType32 = 32,
    EffectType33 = 33,
    EffectType35 = 35,
    EffectType36 = 36,
    EffectType43 = 43,
    EffectType44 = 44,
    EffectType45 = 45,
};

// Data Struct Definitions
//------------------------------------------------

typedef struct
{
    int frameCount;
    int timeOffset;
    int offset08;
    int valueOffset;
    
    if (frameCount > 0)
    {
        local quad end <hidden=true> = FTell();
        FSeek(timeOffset);
        short frameTimes[frameCount] <bgcolor=cLtAqua>;
    
        FSeek(offset08);
        short unk2[frameCount] <bgcolor=cAqua>; // Seen as 0 and 1 so far
        
        FSeek(valueOffset);
        ubyte values[frameCount] <bgcolor=cDkAqua>;
        FSeek(end);
    }
} EffectParamByte <bgcolor=cDkYellow, read=ReadEffectParamByte, optimize=false>;

string ReadEffectParamByte(EffectParamByte& value)
{
    return Str("Frames: %d", value.frameCount);
}

typedef struct
{
    int frameCount;
    int timeOffset;
    int offset08;
    int valueOffset;
    
    if (frameCount > 0)
    {
        local quad end <hidden=true> = FTell();
        FSeek(timeOffset);
        short frameTimes[frameCount] <bgcolor=cLtAqua>;
    
        FSeek(offset08);
        short unk2[frameCount] <bgcolor=cAqua>; // Seen as 0 and 1 so far
        
        FSeek(valueOffset);
        float values[frameCount] <bgcolor=cDkAqua>;
        FSeek(end);
    }
} EffectParamFloat <bgcolor=cDkYellow, read=ReadEffectParamFloat, optimize=false>;

string ReadEffectParamFloat(EffectParamFloat& value)
{
    return Str("Frames: %d", value.frameCount);
}

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    int unk08; Assert(unk08 == 0);
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    
    EffectParamFloat unk44;
    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
} Effect0 <bgcolor=cYellow>;

typedef struct
{
    short frameTime;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    float unk14;
    int unk18; Assert(unk18 == 0);
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    short unk48;
    short unk4A;
    short unk4C;
    short unk4E;
    short unk50;
    short unk52;
    
    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
    EffectParamFloat width;
    EffectParamFloat unkC4;
    EffectParamFloat length;
    EffectParamByte unkE4;
    EffectParamByte red;
    EffectParamByte green;
    EffectParamByte blue;
    EffectParamFloat unk124;
    EffectParamFloat unk134;
    EffectParamFloat unk144;
    EffectParamFloat unk154;
    EffectParamFloat unk164;
} Effect2 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    float unk14;
    float unk18;
    float unk1C;
    int unk20; Assert(unk20 == 0);
    float unk24;
    float unk28;
    short unk2C;
    short unk2E;
    short unk30;
    short unk32;
    short unk34;
    short unk36;
    short unk38;
    short unk3A;
    int unk3C; Assert(unk3C == 0);
    short unk40;
    short unk42;
    int unk44; Assert(unk44 == 0);
    
    EffectParamByte unk48;
    EffectParamByte unk58;
    EffectParamByte unk68;
    EffectParamByte unk78;
    EffectParamFloat unk88;
    EffectParamFloat unk98;
} Effect5 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    short unk38;
    short unk3A;
    
    EffectParamFloat unk3C;
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
} Effect8 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    ubyte unk04;
    ubyte unk05;
    ubyte unk06;
    ubyte unk07;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    float unk2C;
    float unk30;
    float unk34;
    ubyte unk38;
    ubyte unk39;
    ubyte unk3A;
    ubyte unk3B;
    
    EffectParamFloat unk3C;
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
} Effect9 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    ubyte unk38;
    ubyte unk39;
    ubyte unk3A;
    ubyte unk3B;
    
    EffectParamFloat unk3C;
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
    EffectParamFloat unk7C;
    EffectParamFloat unk8C;
} Effect10 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    float unk08;
    int unk0C; Assert(unk0C == 0);
    float unk10;
    float unk14;
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    float unk24;
    short unk28;
    short unk2A;
    
    EffectParamFloat red;
    EffectParamFloat green;
    EffectParamFloat blue;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
    EffectParamFloat unk7C;
    EffectParamFloat unk8C;
    EffectParamFloat unk9C;
    EffectParamFloat unkAC;
    EffectParamFloat unkBC;
    EffectParamFloat unkCC;
    EffectParamFloat unkDC;
    EffectParamFloat unkEC;
    EffectParamFloat unkFC;
} Effect11 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    int unk44; Assert(unk44 == 0);
    
    EffectParamFloat unk48;
    EffectParamFloat unk58;
    EffectParamFloat unk68;
    EffectParamFloat unk78;
    EffectParamFloat unk88;
    EffectParamByte unk98;
    EffectParamByte unkA8;
    EffectParamByte unkB8;
} Effect12 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    int unk10; Assert(unk10 == 0);
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    
    EffectParamFloat unk48;
    EffectParamFloat unk58;
    EffectParamFloat unk68;
    EffectParamFloat unk78;
    EffectParamFloat unk88;
    EffectParamByte unk98;
    EffectParamByte unkA8;
    EffectParamByte unkB8;
} Effect13 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    ubyte unk10;
    ubyte unk11;
    ubyte unk12;
    ubyte unk13;
    int unk14; Assert(unk14 == 0);
    
    EffectParamFloat unk18;
    EffectParamFloat unk28;
    EffectParamFloat unk38;
    EffectParamFloat unk48;
    EffectParamFloat unk58;
    EffectParamFloat unk68;
} Effect16 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06; Assert(unk06 == 0);
    short unk08;
    short unk0A;
    float unk0C;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    short unk18;
    short unk1A;
    short unk1C;
    short unk1E;
    short unk20;
    short unk22;
    short unk24;
    short unk26;
    short unk28;
    short unk2A;
    short unk2C;
    short unk2E;
    short unk30;
    short unk32;
    
    EffectParamFloat unk34;
    EffectParamFloat unk44;
} Effect17 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    float unk08;
    float unk0C;
    float unk10;
    ubyte unk14;
    ubyte unk15;
    ubyte unk16;
    ubyte unk17;
    int unk18; Assert(unk18 == 0);
    
    EffectParamFloat unk1C;
    EffectParamFloat unk2C;
    EffectParamFloat unk3C;
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
} Effect19 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    float unk34;
    short unk38;
    short unk3A;
    short unk3C;
    short unk3E;
    float unk40;
    int unk44; Assert(unk44 == 0);
    ubyte unk48;
    ubyte unk49;
    ubyte unk4A;
    ubyte unk4B;
    
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
    EffectParamFloat unk7C;
    EffectParamFloat unk8C;
    EffectParamFloat unk9C;
    EffectParamByte unkAC;
    EffectParamByte unkBC;
    EffectParamByte unkCC;
    EffectParamByte unkDC;
    EffectParamFloat unkEC;
    EffectParamFloat unkFC;
} Effect21 <bgcolor=cYellow>;

typedef struct
{
    float unk00;
    float unk04;
    float unk08;
    float unk0C;
    
    EffectParamByte unk10;
    EffectParamFloat unk20;
} Effect22 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    float unk18;
    int unk1C; Assert(unk1C == 0);
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    short unk30;
    short unk32;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    short unk48;
    short unk4A;
    ubyte unk4C; 
    ubyte unk4D; 
    ubyte unk4E; 
    ubyte unk4F;
    ubyte unk50; 
    ubyte unk51; 
    ubyte unk52; 
    ubyte unk53;
    
    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
    EffectParamFloat unkB4;
    EffectParamFloat unkC4;
    EffectParamByte unkD4;
    EffectParamByte unkE4;
    EffectParamByte unkF4;
    EffectParamByte unk104;
    EffectParamFloat unk114;
    EffectParamFloat unk124;
    EffectParamFloat unk134;
    EffectParamFloat unk144;
} Effect23 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    int unk04; Assert(unk04 == 0);
    float unk06;
    int unk08; Assert(unk08 == 0);
    int unk0A; Assert(unk0A == 0);
    int unk0C; Assert(unk0C == 0);
    int unk0E; Assert(unk0E == 0);
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    
    EffectParamByte unk20;
    EffectParamByte unk30;
} Effect28 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    short unk30;
    short unk32;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    short unk48;
    short unk4A;
    ubyte unk4C;
    ubyte unk4D;
    ubyte unk4E;
    ubyte unk4F;
    ubyte unk50;
    ubyte unk51;
    short unk52;
    
    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
    EffectParamFloat unkB4;
    EffectParamFloat unkC4;
    EffectParamByte unkD4;
    EffectParamByte unkE4;
    EffectParamByte unkF4;
    EffectParamByte unk104;
    EffectParamFloat unk114;
    EffectParamFloat unk124;
    EffectParamFloat unk134;
    EffectParamFloat unk144;
} Effect31 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    int unk08; Assert(unk08 == 0);
    float unk0C;
    float unk10;
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    float unk20;
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    short unk38;
    short unk3A;
    
    EffectParamFloat unk3C;
    EffectParamFloat unk4C;
    EffectParamFloat unk5C;
    EffectParamFloat unk6C;
} Effect32 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    short unk30;
    short unk32;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    short unk48;
    short unk4A;
    ubyte unk4C;
    ubyte unk4D;
    ubyte unk4E;
    ubyte unk4F;
    ubyte unk50;
    ubyte unk51;
    ubyte unk52;
    ubyte unk53;
    
    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
    EffectParamFloat unkB4;
    EffectParamFloat unkC4;
    EffectParamByte unkD4;
    EffectParamByte unkE4;
    EffectParamByte unkF4;
    EffectParamByte unk104;
    EffectParamFloat unk114;
    EffectParamFloat unk124;
    EffectParamFloat unk134;
    EffectParamFloat unk144;
} Effect33 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    int unk04; Assert(unk04 == 0);
} Effect35 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    short unk10;
    short unk12;
    short unk14;
    short unk16;
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    ubyte unk30;
    ubyte unk31;
    ubyte unk32;
    ubyte unk33;
    float unk34;
    float unk38;
    float unk3C;
    float unk40;
    float unk44;
    short unk48;
    short unk4A;
    ubyte unk4C;
    ubyte unk4D;
    ubyte unk4E;
    ubyte unk4F;
    ubyte unk50;
    ubyte unk51;
    ubyte unk52;
    ubyte unk53;

    EffectParamFloat unk54;
    EffectParamFloat unk64;
    EffectParamFloat unk74;
    EffectParamFloat unk84;
    EffectParamFloat unk94;
    EffectParamFloat unkA4;
    EffectParamFloat unkB4;
    EffectParamFloat unkC4;
    EffectParamByte unkD4;
    EffectParamByte unkE4;
    EffectParamByte unkF4;
    EffectParamByte unk104;
    EffectParamFloat unk114;
    EffectParamFloat unk124;
    EffectParamFloat unk134;
    EffectParamFloat unk144;
    EffectParamFloat unk154;
    EffectParamFloat unk164;
    EffectParamFloat unk174;
} Effect36 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    float unk08;
    float unk0C;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    float unk2C;
    float unk30;
    int unk34; Assert(unk34 == 0);
    
    EffectParamFloat unk38;
    EffectParamFloat unk48;
    EffectParamFloat unk58;
} Effect43 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    short unk08;
    short unk0A;
    short unk0C;
    short unk0E;
    float unk10;
    float unk14;
    int unk18; Assert(unk18 == 0);
    float unk1C;
    float unk20;
    float unk24;
    float unk28;
    ubyte unk2C;
    ubyte unk2D;
    ubyte unk2E;
    ubyte unk2F;
    int unk30; Assert(unk30 == 0);
    float unk34;
    int unk38; Assert(unk38 == 0);
    ubyte unk3C;
    ubyte unk3D;
    ubyte unk3E;
    ubyte unk3F;
    
    EffectParamFloat unk40;
    EffectParamFloat unk50;
    EffectParamFloat unk60;
    EffectParamByte unk70;
    EffectParamByte unk80;
    EffectParamByte unk90;
    EffectParamByte unkA0;
    EffectParamFloat unkB0;
    EffectParamFloat unkC0;
} Effect44 <bgcolor=cYellow>;

typedef struct
{
    short unk00;
    short unk02;
    short unk04;
    short unk06;
    int unk08; Assert(unk08 == 0);
    float unk0C;
    int unk10; Assert(unk10 == 0);
    float unk14;
    float unk18;
    short unk1C;
    short unk1E;
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    
    EffectParamFloat unk30;
    EffectParamByte unk40;
    EffectParamByte unk50;
    EffectParamByte unk60;
    EffectParamByte unk70;
    EffectParamFloat unk80;
} Effect45 <bgcolor=cYellow>;

// Struct Definitions
//------------------------------------------------

local int READ_COUNT <hidden=true> = 0;
struct Effect;

void ExpectEffectUnk0A(short expected, short value)
{
    Assert(expected == value, Str("Unexpected value for effect unk0A: %d != %d", expected, value));
}

typedef struct
{
    EffectType type;
    short index;
    short parentIndex; Assert(parentIndex < index);
    short firstChildIndex; Assert(firstChildIndex > index || firstChildIndex == -1);
    short nextSiblingIndex; Assert(nextSiblingIndex > index || nextSiblingIndex == -1);
    short unk0A;
    int unk0C; Assert(unk0C == 0);
    
    switch (type)
    {
        case EffectType0:
            ExpectEffectUnk0A(4, unk0A);
            Effect0 data;
            break;
        case EffectType2:
            ExpectEffectUnk0A(16, unk0A);
            Effect2 data;
            break;
        case EffectType5:
            ExpectEffectUnk0A(11, unk0A);
            Effect5 data;
            break;
        case EffectType8:
            ExpectEffectUnk0A(2, unk0A);
            Effect8 data;
            break;
        case EffectType9:
            ExpectEffectUnk0A(2, unk0A);
            Effect9 data;
            break;
        case EffectType10:
            ExpectEffectUnk0A(2, unk0A);
            Effect10 data;
            break;
        case EffectType11:
            ExpectEffectUnk0A(2, unk0A);
            Effect11 data;
            break;
        case EffectType12:
            ExpectEffectUnk0A(9, unk0A);
            Effect12 data;
            break;
        case EffectType13:
            ExpectEffectUnk0A(9, unk0A);
            Effect13 data;
            break;
        case EffectType16:
            ExpectEffectUnk0A(3, unk0A);
            Effect16 data;
            break;
        case EffectType17:
            ExpectEffectUnk0A(3, unk0A);
            Effect17 data;
            break;
        case EffectType19:
            ExpectEffectUnk0A(3, unk0A);
            Effect19 data;
            break;
        case EffectType21:
            ExpectEffectUnk0A(12, unk0A);
            Effect21 data;
            break;
        case EffectType22:
            ExpectEffectUnk0A(1, unk0A);
            Effect22 data;
            break;
        case EffectType23:
            ExpectEffectUnk0A(15, unk0A);
            Effect23 data;
            break;
        case EffectType28:
            ExpectEffectUnk0A(0, unk0A);
            Effect28 data;
            break;
        case EffectType31:
            ExpectEffectUnk0A(6, unk0A);
            Effect31 data;
            break;
        case EffectType32:
            ExpectEffectUnk0A(1, unk0A);
            Effect32 data;
            break;
        case EffectType33:
            ExpectEffectUnk0A(6, unk0A);
            Effect33 data;
            break;
        case EffectType35:
            ExpectEffectUnk0A(0, unk0A);
            Effect35 data;
            break;
        case EffectType36:
            ExpectEffectUnk0A(4, unk0A);
            Effect36 data;
            break;
        case EffectType43:
            ExpectEffectUnk0A(3, unk0A);
            Effect43 data;
            break;
        case EffectType44:
            ExpectEffectUnk0A(11, unk0A);
            Effect44 data;
            break;
        case EffectType45:
            ExpectEffectUnk0A(1, unk0A);
            Effect45 data;
            break;
        default:
            Assert(false, Str("Unknown EffectType: %d", type));
            break;
    }
    
#ifdef READ_TREE
    if (firstChildIndex > -1)
    {
        FSeek(sfx.effectOffsets[firstChildIndex]);
        Effect childEffect;
        while (childEffect.nextSiblingIndex > -1)
        {
            FSeek(sfx.effectOffsets[childEffect.nextSiblingIndex]);
            Effect childEffect;
        }
    }
    
    READ_COUNT++;
#endif
} Effect <bgcolor=cLtYellow, read=ReadEffect>;

string ReadEffect(Effect& entry)
{
    return Str("Type: %s", EnumToString(entry.type));
}

typedef struct
{
    int effectCount;
    int effectOffsets[effectCount];
    
#ifdef READ_TREE
    if (effectCount > 0)
    {
        FSeek(effectOffsets[0]);
        Effect rootEffect;
    }

    Assert(READ_COUNT == effectCount, Str("Unexpected number of effects read: %d/%d", READ_COUNT, effectCount));
#endif

#ifdef READ_FLAT
    struct
    {
        local int i <hidden=true>;
        for (i = 0; i < effectCount; i++) 
        {
            FSeek(effectOffsets[i]);
            Effect effect;
            Assert(effect.index == i, Str("Unexpected effect index value: %d != %d", effect.index, i));
        }
    } Entries;
#endif
} SFX <bgcolor=cLtRed>;

// Read
//------------------------------------------------

SFX sfx;