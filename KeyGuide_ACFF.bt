//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: KeyGuide.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: Armored Core Formula Front KeyGuide files.
//  Category: 
// File Mask: keyguide.bin, __keyguide.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define HEADER_SIZE 32
#define KEYINFO_SIZE 16
#define KEYDATA_SIZE 16
#define ENTRY3_SIZE 8

typedef struct
{
    ubyte unk00 <hidden=true>; Assert(unk00 == 0);
    ubyte littleEndian();
    ubyte bigEndian();
    if (littleEndian == 1)
        LittleEndian();
    else if (bigEndian == 1)
        BigEndian();
    else
        Assert(false);
    
    ubyte unk03 <hidden=true>; Assert(unk03 == 0);
    uint unk04 <hidden=true>; Assert(unk04 == 0);
    uint keyInfoCount;
    uint unk0C <hidden=true>; Assert(unk0C == 0);
    uint keyDataCount; Assert(keyInfoCount == keyDataCount);
    uint unk14 <hidden=true>; Assert(unk14 == 0);
    uint entryCount3;
    uint unk1C <hidden=true>; Assert(unk1C == 0);
    
    local quad stringsOffset <hidden=true> = HEADER_SIZE + (keyInfoCount * KEYINFO_SIZE) + (keyDataCount * KEYDATA_SIZE) + (entryCount3 * ENTRY3_SIZE);
} Header <bgcolor=cLtRed>;

typedef struct
{
    uint id;
    uint unk04; Assert(unk04 == 1);
    uint index;
    uint unk0C <hidden=true>; Assert(unk0C == 0);
} KeyInfo <bgcolor=cLtGreen, read=ReadKeyInfo, optimize=false>;

string ReadKeyInfo(KeyInfo& entry)
{
    return Str("%i \\ %i \\ %i",  entry.id, entry.unk04, entry.index);
}

typedef struct
{
    string str;
} Text <bgcolor=cYellow, read=ReadText, optimize=false>;

string ReadText(Text& text)
{
    return text.str;
}

typedef struct
{
    uint count;
    uint startIndex;
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    uint unk0C <hidden=true>; Assert(unk0C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(nextStringOffset);
    Text text[count];
    nextStringOffset = FTell();
    FSeek(pos);
} KeyData <bgcolor=cGreen, read=ReadKeyData, optimize=false>;

string ReadKeyData(KeyData& entry)
{
    return Str("%i \\ %i", entry.count, entry.startIndex);
}

typedef struct
{
    uint unk00;
    uint unk04 <hidden=true>; Assert(unk04 == 0);
} Entry3 <bgcolor=cDkGreen, read=ReadEntry3, optimize=false>;

string ReadEntry3(Entry3& entry)
{
    return Str("%i", entry.unk00);
}

//------------------------------------------------

Header header;
local quad nextStringOffset <hidden=true> = header.stringsOffset;

KeyInfo keyInfo[header.keyInfoCount];
KeyData keyData[header.keyDataCount];
Entry3 entries3[header.entryCount3];