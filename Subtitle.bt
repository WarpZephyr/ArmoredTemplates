//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: DebriefingSubtitle.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Armored Core For Answer debriefing subtitle files
//  Category: 
// File Mask: *.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

// There is no indicator for this as far as I know,
// but some unused subtitles use strings instead of wstrings.
// Set to 1 to read as wstring
// Set to 0 to read as string
local byte IS_WSTRING = 1;

//------------------------------------------------

typedef struct
{
    uint subtitleOffset;
    uint subtitleCount;
    uint subtitleEntriesOffset;
    uint unk0C;
    uint videoOffset;
    ushort unk14;
    ushort eventID; // Maybe
    uint unk18 <hidden=true>; Assert(unk18 == 0);
    uint unk1C <hidden=true>; Assert(unk1C == 0);
} Header <bgcolor=cLtRed>;

typedef struct
{
    short frameDelay;
    short frameTime;
    uint textOffset; // relative to subtitle container
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    uint unk0C <hidden=true>; Assert(unk0C == 0);
} SubtitleEntry <bgcolor=cGreen, read=ReadSubtitleEntry, optimize=false>;

string ReadSubtitleEntry(SubtitleEntry& subtitleEntry)
{
    string str;
    return SPrintf(str, "Subtitle begins after %i frames have past since the last subtitle, and the frame lasts for %i frame(s)", subtitleEntry.frameDelay, subtitleEntry.frameTime);
}

typedef struct(int subtitleOffset)
{
    uint videoNameOffset;
    uint unk04 <hidden=true>; Assert(unk04 == 0);
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    short width;
    short height;
    uint unk14 <hidden=true>; Assert(unk14 == 0);
    uint unk18 <hidden=true>; Assert(unk18 == 0);
    uint unk1C <hidden=true>; Assert(unk1C == 0);
    uint unk20 <hidden=true>; Assert(unk20 == 0);

    local quad end = FTell();
    FSeek(subtitleOffset + videoNameOffset);
    if(IS_WSTRING == 1) {
        wstring videoName;
        ushort padding; Assert(padding == 0);
    }
    else
    {
        string videoName;
    }
    FSeek(end);
} VideoEntry <bgcolor=cPurple, read=ReadVideoEntry, optimize=false>;

string ReadVideoEntry(VideoEntry& videoEntry)
{
    string str;
    return SPrintf(str, "Video is named \"%s\" with %i by %i resolution", videoEntry.videoName, videoEntry.width, videoEntry.height);
}

typedef struct
{
    if(IS_WSTRING == 1) {
        wstring text;
        ushort padding; Assert(padding == 0);
    }
    else
    {
        string text;
    }
} Subtitle <bgcolor=cLtGreen, read=ReadSubtitle>;

string ReadSubtitle(Subtitle& subtitle)
{
    return subtitle.text;
}

//------------------------------------------------

Header header;

FSeek(header.subtitleEntriesOffset);
SubtitleEntry subtitleEntries[header.subtitleCount];

FSeek(header.videoOffset);
VideoEntry videoEntry(header.subtitleOffset);

local int i;
for(i = 0; i < header.subtitleCount; i++)
{
    FSeek(header.subtitleOffset + subtitleEntries[i].textOffset);
    Subtitle subtitle;
}