//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: DebriefingSubtitle.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Armored Core For Answer debriefing subtitle files
//  Category: 
// File Mask: *.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

// There is no indicator for this as far as I know,
// but some unused subtitles use strings instead of wstrings.
// Set to 1 to read as wstring
// Set to 0 to read as string
local byte IS_WSTRING = 1;

//------------------------------------------------

typedef struct
{
    uint textOffset;
    uint subtitleCount;
    uint subtitleEntriesOffset;
    uint videoCount;
    uint videoEntriesOffset;
    uint eventID; // Maybe
    uint unk18 <hidden=true>; Assert(unk18 == 0);
    uint unk1C <hidden=true>; Assert(unk1C == 0);
} Header <bgcolor=cLtRed>;

typedef struct
{
    short frameDelay;
    short frameTime;
    uint textOffset;
    uint unk08 <hidden=true>; Assert(unk08 == 0);
    uint unk0C <hidden=true>; Assert(unk0C == 0);

    local quad end = FTell();
    FSeek(header.textOffset + textOffset);
    if (IS_WSTRING)
    {
        wstring text;
        ushort padding; Assert(padding == 0);
    }
    else
    {
        string text;
    }
    FSeek(end);
} SubtitleEntry <bgcolor=cGreen, read=ReadSubtitleEntry, optimize=false>;

wstring ReadSubtitleEntry(SubtitleEntry& entry)
{
    return entry.text;
}

typedef struct
{
    uint textOffset;
    uint unk04 <hidden=true>; Assert(unk04 == 0);
    short unk08;
    short unk0A;
    short width;
    short height;
    uint unk14 <hidden=true>; Assert(unk14 == 0);
    uint unk18 <hidden=true>; Assert(unk18 == 0);
    uint unk1C <hidden=true>; Assert(unk1C == 0);
    uint unk20 <hidden=true>; Assert(unk20 == 0);

    local quad end = FTell();
    FSeek(header.textOffset + textOffset);
    if (IS_WSTRING)
    {
        wstring text;
        ushort padding; Assert(padding == 0);
    }
    else
    {
        string text;
    }
    FSeek(end);
} VideoEntry <bgcolor=cPurple, read=ReadVideoEntry, optimize=false>;

wstring ReadVideoEntry(VideoEntry& entry)
{
    local string str;
    return SPrintf(str, "%i %i \t %i %i \t %s", entry.width, entry.height, entry.unk08, entry.unk0A, entry.text);
}

//------------------------------------------------

Header header;

if (header.subtitleCount > 0)
{
    FSeek(header.subtitleEntriesOffset);
    SubtitleEntry subtitleEntries[header.subtitleCount];
}

if (header.videoCount > 0)
{
    FSeek(header.videoEntriesOffset);
    VideoEntry videoEntries[header.videoCount];
}