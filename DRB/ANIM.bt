//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: ANIM.bt
//   Authors: WarpZephyr
//   Version: 1.0.1
//   Purpose: DRB animations.
//  Category: Dantelion
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct (enum version)
{
    int nameOffset <format=hex>;
    int anioCount; //Assert(anioCount == 4);
    int anioOffset <format=hex>;
    int unk0C; // Frame count?
    int unk10; Assert(unk10 >= 0 && unk10 <= 7);
    int unk14; Assert(unk14 >= 0 && unk14 <= 8);
    int unk18; //Assert(unk18 == 4);
    
    if (version == VERSION_ACFA)
    {
        int unk1C;
    }
    else
    {
        byte unk1C; Assert(unk1C == 0 || unk1C == 1);
        byte unk1D; Assert(unk1D == 0);
        byte unk1E; Assert(unk1E == 0);
        byte unk1F; Assert(unk1F == 0);
        if (unk1C == 1)
        {
            int unk20 <hidden=true>; Assert(unk20 == 0);
            int unk24 <hidden=true>; Assert(unk24 == 0);
            int unk28 <hidden=true>; Assert(unk28 == 0);
            int unk2C <hidden=true>; Assert(unk2C == 0); 
        }
    }

    local quad pos <hidden=true> = FTell();
    FSeek(offsets.str + nameOffset);
    wstring name;

    FSeek(offsets.anio + anioOffset);
    ANIOEntry anioEntries[anioCount] <bgcolor=cSilver, optimize=false>;
    FSeek(pos);
} ANIMEntry <read=ReadANIMEntry, optimize=false>;

wstring ReadANIMEntry(ANIMEntry& entry)
{
    string str;
    SPrintf(str, "%3i %s", entry.unk0C, entry.name);
    return str;
}