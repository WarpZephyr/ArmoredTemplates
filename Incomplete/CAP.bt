//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: CAP.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Armored Core cap files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../Util.bt"
BigEndian();

//------------------------------------------------

int FourCCToInt(string fourCC) {
    return fourCC[0] | ((int)fourCC[1] << 8) | ((int)fourCC[2] << 16) | ((int)fourCC[3] << 24);
}

string IntToFourCC(int value) {
    string str;
    return SPrintf(str, "%c%c%c%c",
        value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);
}

typedef struct
{
    int fourCC <format=hex>; Assert(fourCC == FourCCToInt("CAP\0"));
    int unk04; Assert(unk04 == 1);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} Header <bgcolor=cLtRed, read=ReadHeader>;

string ReadHeader(Header& header) {
    string str;
    return SPrintf(str, "%s", IntToFourCC(header.fourCC));
}

typedef struct
{
    short unk00;
    short unk02;
    int unk04;
    float unk08;
    float unk0C;
    short unk10;
    short unk12;
    int unk14;
    float unk18;
    short unk1C;
    short unk1E;
    if(unk04 == 400009101)
    {
        short unk20;
        short unk22;
        float unk24;
        float unk28;
        float unk2C;
    }
} Entry <bgcolor=cLtGreen, optimize=false>;

//------------------------------------------------

Header header;
Entry entries[13];