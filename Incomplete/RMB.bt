//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: RMB.bt
//   Authors: WarpZephyr
//   Version: 
//   Purpose: Pad rumble files, or poly as Armored Core For Answer calls them.
//  Category: Dantelion
// File Mask: *.rmb
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../../Util.bt"
BigEndian();

//------------------------------------------------

typedef struct {
    int unk00; Assert(unk00 == 0);
    int fileSize;
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int offset20;
    int offset20Count;
    int mapEntriesOffset;
    int mapEntriesCount;
    int offset3C;
    int offset3CCount;
    int offset44;
    int offset44Count;
    int unk4C <hidden=true>; Assert(unk4C == 0);
} Header <bgcolor=cLtRed>;

typedef struct
{
    local quad start = FTell();

    int nameOffset;
    int sibOffset;
    int idOffset;
    int unk0C;
    int offset10;
    int dataOffset;

    FSeek(start + nameOffset);
    string name;

    FSeek(start + sibOffset);
    string sibPath;

    FSeek(start + idOffset);
    string id;

    if(offset10 != 0)
    {
        FSeek(start + offset10);
        int unk00 <hidden=true>; Assert(unk00 == 0);
        int unk04 <hidden=true>; Assert(unk04 == 0);
        int unk08 <hidden=true>; Assert(unk08 == 0);
        int unk0C <hidden=true>; Assert(unk0C == 0);
        int unk10 <hidden=true>; Assert(unk10 == 0);
        int unk14 <hidden=true>; Assert(unk14 == 0);
        int unk18 <hidden=true>; Assert(unk18 == 0);
        int unk1C <hidden=true>; Assert(unk1C == 0);
    }

    FSeek(start + dataOffset);
    local quad dataStart = FTell();
    int dataOffset00;
    FSeek(dataStart + dataOffset00);
    short unkShortA;
    short unkShortB;
    ubyte unk[60];
} Unk20Entry <bgcolor=cLtGreen>;

typedef struct
{
    local quad start = FTell();

    int nameOffset;
    int sibOffset;
    int dataOffset;

    FSeek(start + nameOffset);
    string name;

    FSeek(start + sibOffset);
    string sibPath;

    FSeek(start + dataOffset);
    ubyte data[128];
} MapEntry <bgcolor=cGreen>;

typedef struct
{
    local quad start = FTell();

    int descriptionOffset;
    int offset08;
    int unk0C;
    int offset10;
    int unk14;
    int offset18;
    int offset1C;

    FSeek(start + descriptionOffset);
    string description;

    FSeek(start + offset1C);
    int offset1CUnk00;

    FSeek(start + offset08);
    int offset08Unk00;
    int offset08Unk04;
    int offset08Unk08;
} Unk3CEntry <bgcolor=cDkGreen>;

//------------------------------------------------

Header header;

local int i;
local quad next;

FSeek(header.offset20);
struct {
    for (i = 0; i < header.offset20Count; i++)
    {
        struct {
            int unk20EntryOffset;
            next = FTell();
            FSeek(unk20EntryOffset);
            Unk20Entry unk20Entry;
            FSeek(next);
        } Unk20;
    }
} Unk20Entries <bgcolor=cLtGreen>;

FSeek(header.mapEntriesOffset);
struct
{
    for (i = 0; i < header.mapEntriesCount; i++)
    {
        struct {
            int mapEntryOffset;
            next = FTell();
            FSeek(mapEntryOffset);
            MapEntry mapEntry;
            FSeek(next);
        } Map;
    }
} MapEntries <bgcolor=cGreen>;

FSeek(header.offset3C);
struct
{
    for (i = 0; i < header.offset3CCount; i++)
    {
        struct {
            int unk3CEntryOffset;
            next = FTell();
            FSeek(unk3CEntryOffset);
            Unk3CEntry unk3CEntry;
            FSeek(next);
        } Unk3C;
    }
} Unk3CEntries <bgcolor=cDkGreen>;
