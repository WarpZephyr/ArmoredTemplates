//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: XPR2.bt
//   Authors: WarpZephyr
//   Version: 1.0.0
//   Purpose: XPR texture containers.
//  Category: Textures
// File Mask: *.xpr
//  ID Bytes: 58 50 52 32
//   History: 
//------------------------------------------------

BigEndian();

void Align(int align)
{
    local quad pos = FTell();
    if (pos % align > 0)
    {
        FSkip(align - (pos % align));
    }
}

//------------------------------------------------

typedef struct
{
    char magic[4]; Assert(magic == "XPR2");
    int alignment;
    int dataSize;
} Header <bgcolor=cLtRed>;

typedef struct
{
    uint unk00;
    uint unk04;
    uint unk08;
    uint unk0C;
    uint unk10;
    uint unk14;
    uint unk18;
    uint unk1C;
    uint format;
    uint size_unk : 6;
    uint height : 13;
    uint width : 13;
    uint unk28;
    uint levels;
    uint unk30;
} TextureResource <bgcolor=cDkRed>;

typedef struct(quad tagsHeaderStart)
{
    char type[4];
    int offset;
    int size;
    int nameOffset;
    
    local quad pos <hidden=true> = FTell();
    FSeek(tagsHeaderStart + nameOffset);
    string name;
    
    FSeek(tagsHeaderStart + offset);
    switch (type)
    {
        case "USER":
            
            break;
        case "TX2D":
            TextureResource resource;
            break;
        case "TX3D":
            TextureResource resource;
            break;
        case "TXCM":
            TextureResource resource;
            break;
        default:
            Assert(false, Str("Unknown resource tag type: %s", type));
    }
    
    FSeek(pos);
} ResourceTag <bgcolor=cDkRed, read=ReadResourceTag, optimize=false>;

string ReadResourceTag(ResourceTag& tag)
{
    return Str("%s | %s", tag.type, tag.name);
}

typedef struct
{
    local quad tagsHeaderStart <hidden=true> = FTell();
    int tagCount;
    ResourceTag tags(tagsHeaderStart)[tagCount];
} ResourceTagList <bgcolor=cRed>;

//------------------------------------------------

Header header;
ResourceTagList tags;
